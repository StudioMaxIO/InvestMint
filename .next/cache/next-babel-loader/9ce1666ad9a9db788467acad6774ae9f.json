{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport Token from \"../../ethereum/token\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nclass TokenShow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      reserveBlockErrorMessage: \"\",\n      sellTokensErrorMessage: \"\",\n      purchaseBlockErrorMessage: \"\",\n      cancelBlockErrorMessage: \"\",\n      reserveBlockLoading: false,\n      sellTokensLoading: false,\n      purchaseBlockLoading: false,\n      cancelBlockLoading: false,\n      tokensToSell: \"\",\n      tokensToTransfer: \"\",\n      transferToAddress: \"\",\n      isAuthorized: false,\n      activeReservation: \"\",\n      activeReservationStatus: \"\",\n      activeReservationCost: \"\",\n      activeReservationExpiration: \"\",\n      activeReservationFinalized: false\n    });\n\n    _defineProperty(this, \"authorizeLink\", async event => {\n      event.preventDefault();\n      this.setState({\n        reserveBlockLoading: true,\n        reserveBlockErrorMessage: \"\"\n      });\n      const linkToken = Token(\"0xa36085f69e2889c224210f603d836748e7dc0088\");\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const approvalAmount = \"10000000000000000000\";\n        await linkToken.methods.approve(this.props.address, approvalAmount).send({\n          from: accounts[0]\n        }); // const reloadRoute = \"/t/\" + this.props.address;\n        // Router.pushRoute(reloadRoute);\n        //checkAuthorization();\n\n        window.location.reload(false);\n      } catch (err) {\n        this.setState({\n          reserveTokenErrorMessage: err.message\n        });\n      }\n\n      this.setState({\n        reserveBlockLoading: false\n      });\n    });\n\n    _defineProperty(this, \"reserveTokenBlock\", async event => {\n      event.preventDefault();\n      console.log(\"Reserve Token Block...\");\n      this.setState({\n        reserveBlockLoading: true,\n        reserveBlockErrorMessage: \"\"\n      });\n      const investMintToken = InvestMint(this.props.address);\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await investMintToken.methods.reserveBlock().send({\n          from: accounts[0]\n        });\n        window.location.reload(false); //const walletUrl = \"/t/\" + this.props.address + \"/wallet\";\n        //window.location.assign(walletUrl);\n      } catch (err) {\n        this.setState({\n          reserveTokenErrorMessage: err.message\n        });\n      }\n\n      this.setState({\n        reserveBlockLoading: false\n      });\n    });\n\n    _defineProperty(this, \"purchaseBlock\", async event => {\n      event.preventDefault();\n      this.setState({\n        purchaseBlockLoading: true,\n        purchaseBlockErrorMessage: \"\"\n      });\n      const investMintToken = InvestMint(this.props.address);\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await investMintToken.methods.purchaseBlock().send({\n          from: accounts[0],\n          value: this.state.activeReservationCost\n        }); //window.location.reload(false);\n\n        const walletUrl = \"/t/\" + this.props.address + \"/wallet\";\n        window.location.assign(walletUrl);\n      } catch (err) {\n        this.setState({\n          purchaseTokenErrorMessage: err.message\n        });\n      }\n\n      this.setState({\n        purchaseBlockLoading: false\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    //const project = Project(props.query.address);\n    this._isMounted = false;\n    const investMintToken = InvestMint(props.query.address);\n    const summary = await investMintToken.methods.getSummary().call();\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      exchangeRate: summary[4],\n      blockCost: summary[3],\n      tokensPerBlock: summary[2]\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.checkAuthorization();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  async checkAuthorization() {\n    const linkToken = Token(\"0xa36085f69e2889c224210f603d836748e7dc0088\");\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts[0]) {\n      const authorization = await linkToken.methods.allowance(accounts[0], this.props.address).call();\n\n      if (authorization >= 1 * (10 ^ 18)) {\n        this._isMounted && this.setState({\n          isAuthorized: true\n        });\n        this.getReservation();\n      }\n    }\n  }\n\n  async getReservation() {\n    const investMintToken = InvestMint(this.props.address);\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts[0]) {\n      const activeReservation = await investMintToken.methods.getActiveReservation().call({\n        from: accounts[0]\n      });\n      this._isMounted && this.setState({\n        activeReservation: activeReservation\n      });\n    }\n\n    if (this.state.activeReservation == 0) {\n      console.log(\"No current reservations.\");\n    } else if (this.state.activeReservation != \"\") {\n      console.log(\"Has reservation: \", this.state.activeReservation);\n      const reservationSummary = await investMintToken.methods.getReservationSummary(this.state.activeReservation).call();\n      this.setState({\n        activeReservationCost: reservationSummary[2],\n        activeReservationFinalized: reservationSummary[4]\n      });\n\n      switch (reservationSummary[1]) {\n        case \"0\":\n          this.setState({\n            activeReservationStatus: \"open\"\n          });\n          break;\n\n        case \"1\":\n          this.setState({\n            activeReservationStatus: \"claimed\"\n          });\n          break;\n\n        case \"2\":\n          this.setState({\n            activeReservationStatus: \"canceled\"\n          });\n          break;\n\n        case \"3\":\n          this.setState({\n            activeReservationStatus: \"expired\"\n          });\n          break;\n\n        default:\n          this.setState({\n            activeReservationStatus: \"unknown\"\n          });\n      }\n\n      let reservationTimestamp = reservationSummary[3];\n      var ts = new Date(reservationTimestamp * 1000);\n      var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      var hours = [\"12\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"];\n      var ampm = ts.getHours() < 12 ? \"AM\" : \"PM\";\n      var year = ts.getFullYear();\n      var month = months[ts.getMonth()];\n      var date = ts.getDate();\n      var hour = hours[ts.getHours()];\n      var min = \"0\" + ts.getMinutes();\n      var sec = \"0\" + ts.getSeconds();\n      var formattedDateTime = month + \" \" + date + \" \" + year + \" \" + hour + \":\" + min.substr(-2) + \":\" + sec.substr(-2) + \" \" + ampm;\n      this.setState({\n        activeReservationExpiration: formattedDateTime\n      }); //window.location.reload(false);\n      //const walletUrl = \"/t/\" + this.props.address + \"/wallet\";\n      //window.location.assign(walletUrl);\n    } else {}\n  }\n\n  render() {\n    if (this.state.activeReservation == \"\" || this.state.activeReservation == 0) {\n      return __jsx(Layout, {\n        page: \"funding\"\n      }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"center\", null, __jsx(Card, {\n        style: {\n          padding: \"10px\",\n          textAlign: \"left\",\n          fontSize: \"18px\"\n        }\n      }, __jsx(\"h2\", {\n        style: {\n          textAlign: \"center\"\n        }\n      }, this.props.tokenName, \" | \", this.props.tokenSymbol), __jsx(\"p\", {\n        style: {\n          textAlign: \"center\",\n          fontSize: \"18px\"\n        }\n      }, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.props.exchangeRate, \"ether\"), \" ETH\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Current Block Cost: \"), __jsx(\"br\", null), web3.utils.fromWei(this.props.blockCost, \"ether\"), \" Ether\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Tokens per Block:\"), \" \", __jsx(\"br\", null), web3.utils.fromWei(this.props.tokensPerBlock, \"ether\"), \" \", this.props.tokenSymbol), __jsx(Form, {\n        onSubmit: this.state.isAuthorized ? this.reserveTokenBlock : this.authorizeLink,\n        error: !!this.state.reserveBlockErrorMessage\n      }, __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.reserveBlockErrorMessage\n      }), __jsx(\"center\", null, __jsx(Button, {\n        size: \"large\",\n        loading: this.state.reserveBlockLoading,\n        color: \"teal\"\n      }, this.state.isAuthorized ? \"Reserve Block\" : \"Authorize LINK\")))))))));\n    } else {\n      return __jsx(Layout, {\n        page: \"funding\"\n      }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"center\", null, __jsx(Card, {\n        style: {\n          padding: \"10px\",\n          textAlign: \"left\",\n          fontSize: \"18px\"\n        }\n      }, __jsx(\"h2\", {\n        style: {\n          textAlign: \"center\"\n        }\n      }, this.props.tokenName, \" | \", this.props.tokenSymbol), __jsx(\"p\", {\n        style: {\n          textAlign: \"center\",\n          fontSize: \"18px\"\n        }\n      }, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.props.exchangeRate, \"ether\"), \" ETH\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Reserved Block Cost: \"), __jsx(\"br\", null), web3.utils.fromWei(this.state.activeReservationCost, \"ether\"), \" \", \"Ether\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Block Expiration: \"), __jsx(\"br\", null), this.state.activeReservationExpiration), __jsx(\"p\", null, __jsx(\"strong\", null, \"Block Status: \"), __jsx(\"br\", null), this.state.activeReservationStatus), __jsx(\"p\", null, __jsx(\"strong\", null, \"Tokens per Block:\"), \" \", __jsx(\"br\", null), web3.utils.fromWei(this.props.tokensPerBlock, \"ether\"), \" \", this.props.tokenSymbol), __jsx(Form, {\n        onSubmit: this.purchaseBlock,\n        error: !!this.state.purchaseBlockErrorMessage\n      }, __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.purchaseBlockErrorMessage\n      }), __jsx(\"center\", null, __jsx(Button, {\n        size: \"large\",\n        loading: this.state.purchaseBlockLoading,\n        color: \"teal\"\n      }, \" \", \"Purchase Block\"), __jsx(\"br\", null))), __jsx(Form, null, __jsx(\"center\", null, __jsx(Button, {\n        style: {\n          marginTop: \"10px\"\n        },\n        size: \"large\",\n        loading: this.state.cancelBlockLoading,\n        color: \"red\"\n      }, \" \", \"Cancel Reservation\")))))))));\n    }\n  }\n\n}\n\nexport default TokenShow;","map":null,"metadata":{},"sourceType":"module"}