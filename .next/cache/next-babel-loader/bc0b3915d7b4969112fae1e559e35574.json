{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nclass TokenWallet extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      exchangeTokensErrorMessage: \"\",\n      exchangeTokensLoading: false,\n      tokensToExchange: \"\",\n      userBalance: \"\",\n      exchangeButtonText: \"Enter Amount to Exchange\"\n    });\n\n    _defineProperty(this, \"setExchangeValue\", event => {\n      var buttonText = \"Enter Amount To Exchange\";\n\n      if (event.target.value != \"\") {\n        const totalExchange = web3.utils.fromWei(this.props.exchangeRate, \"ether\") * event.target.value;\n        buttonText = \"Exchange for \" + totalExchange + \" ETH\";\n      }\n\n      this.setState({\n        tokensToExchange: event.target.value,\n        exchangeButtonText: buttonText\n      });\n    });\n\n    _defineProperty(this, \"exchangeTokens\", async event => {\n      event.preventDefault();\n      this.setState({\n        exchangeTokensLoading: true,\n        exchangeTokensErrorMessage: \"\"\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await tokenFactory.methods.createToken(this.state.tokenName, this.state.tokenSymbol, this.state.wholeTokens, this.state.decimals).send({\n          from: accounts[0]\n        });\n        Router.pushRoute(\"/funding\");\n      } catch (err) {\n        this.setState({\n          reserveTokenErrorMessage: err.message\n        });\n      }\n\n      this.setState({\n        reserveBlockLoading: false\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    this._isMounted = false;\n    const imToken = InvestMint(props.query.address);\n    const summary = await imToken.methods.getSummary().call();\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      tokensPerBlock: summary[2],\n      exchangeRate: summary[4],\n      blockCost: summary[3]\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.loadUserData();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  async loadUserData() {\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts[0]) {\n      const imToken = InvestMint(this.props.address);\n      const ub = await imToken.methods.balanceOf(accounts[0]).call();\n      this.setState({\n        userBalance: ub\n      });\n    }\n  }\n\n  render() {\n    return __jsx(Layout, {\n      page: \"wallet\"\n    }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"center\", null, __jsx(Card, {\n      style: {\n        padding: \"10px\",\n        textAlign: \"left\",\n        fontSize: \"18px\"\n      }\n    }, __jsx(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, this.props.tokenName, \" | \", this.props.tokenSymbol), __jsx(\"p\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \"18px\"\n      }\n    }, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.props.exchangeRate, \"ether\"), \" Ether\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\"), __jsx(\"br\", null), web3.utils.fromWei(this.state.userBalance, \"ether\")), __jsx(\"p\", null, __jsx(\"strong\", null, \"Exchange Tokens:\")), __jsx(Form, {\n      onSubmit: this.exchangeTokens,\n      error: !!this.state.exchangeTokensErrorMessage\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      label: this.props.tokenSymbol,\n      labelPosition: \"right\",\n      value: this.state.tokensToExchange,\n      onChange: event => this.setExchangeValue(event)\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.exchangeTokensErrorMessage\n    }), __jsx(\"center\", null, __jsx(Button, {\n      size: \"large\",\n      loading: this.state.exchangeTokensLoading,\n      color: \"teal\"\n    }, this.state.exchangeButtonText)))))))));\n  }\n\n}\n\nexport default TokenWallet;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/wallet.js"],"names":["React","Component","Form","Button","Input","Message","Grid","Card","Layout","web3","InvestMint","Router","TokenWallet","exchangeTokensErrorMessage","exchangeTokensLoading","tokensToExchange","userBalance","exchangeButtonText","event","buttonText","target","value","totalExchange","utils","fromWei","props","exchangeRate","setState","preventDefault","accounts","eth","getAccounts","tokenFactory","methods","createToken","state","tokenName","tokenSymbol","wholeTokens","decimals","send","from","pushRoute","err","reserveTokenErrorMessage","message","reserveBlockLoading","getInitialProps","_isMounted","imToken","query","address","summary","getSummary","call","tokensPerBlock","blockCost","componentDidMount","loadUserData","componentWillUnmount","ub","balanceOf","render","padding","textAlign","fontSize","exchangeTokens","setExchangeValue"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nclass TokenWallet extends Component {\n  state = {\n    exchangeTokensErrorMessage: \"\",\n    exchangeTokensLoading: false,\n    tokensToExchange: \"\",\n    userBalance: \"\",\n    exchangeButtonText: \"Enter Amount to Exchange\"\n  };\n\n  static async getInitialProps(props) {\n    this._isMounted = false;\n    const imToken = InvestMint(props.query.address);\n    const summary = await imToken.methods.getSummary().call();\n\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      tokensPerBlock: summary[2],\n      exchangeRate: summary[4],\n      blockCost: summary[3]\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.loadUserData();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setExchangeValue = event => {\n    var buttonText = \"Enter Amount To Exchange\";\n\n    if (event.target.value != \"\") {\n      const totalExchange =\n        web3.utils.fromWei(this.props.exchangeRate, \"ether\") *\n        event.target.value;\n      buttonText = \"Exchange for \" + totalExchange + \" ETH\";\n    }\n\n    this.setState({\n      tokensToExchange: event.target.value,\n      exchangeButtonText: buttonText\n    });\n  };\n\n  exchangeTokens = async event => {\n    event.preventDefault();\n    this.setState({\n      exchangeTokensLoading: true,\n      exchangeTokensErrorMessage: \"\"\n    });\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      await tokenFactory.methods\n        .createToken(\n          this.state.tokenName,\n          this.state.tokenSymbol,\n          this.state.wholeTokens,\n          this.state.decimals\n        )\n        .send({\n          from: accounts[0]\n        });\n\n      Router.pushRoute(\"/funding\");\n    } catch (err) {\n      this.setState({ reserveTokenErrorMessage: err.message });\n    }\n\n    this.setState({ reserveBlockLoading: false });\n  };\n\n  async loadUserData() {\n    const accounts = await web3.eth.getAccounts();\n    if (accounts[0]) {\n      const imToken = InvestMint(this.props.address);\n      const ub = await imToken.methods.balanceOf(accounts[0]).call();\n      this.setState({ userBalance: ub });\n    }\n  }\n\n  render() {\n    return (\n      <Layout page=\"wallet\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <center>\n                <Card\n                  style={{\n                    padding: \"10px\",\n                    textAlign: \"left\",\n                    fontSize: \"18px\"\n                  }}\n                >\n                  <h2\n                    style={{\n                      textAlign: \"center\"\n                    }}\n                  >\n                    {this.props.tokenName} | {this.props.tokenSymbol}\n                  </h2>\n                  <p\n                    style={{\n                      textAlign: \"center\",\n                      fontSize: \"18px\"\n                    }}\n                  >\n                    1 {this.props.tokenSymbol} ={\" \"}\n                    {web3.utils.fromWei(this.props.exchangeRate, \"ether\")} Ether\n                  </p>\n                  <p>\n                    <strong>Balance:</strong>\n                    <br />\n                    {web3.utils.fromWei(this.state.userBalance, \"ether\")}\n                  </p>\n                  <p>\n                    <strong>Exchange Tokens:</strong>\n                  </p>\n                  <Form\n                    onSubmit={this.exchangeTokens}\n                    error={!!this.state.exchangeTokensErrorMessage}\n                  >\n                    <Form.Field>\n                      <Input\n                        label={this.props.tokenSymbol}\n                        labelPosition=\"right\"\n                        value={this.state.tokensToExchange}\n                        onChange={event => this.setExchangeValue(event)}\n                      />\n                    </Form.Field>\n                    <Message\n                      error\n                      header=\"Oops!\"\n                      content={this.state.exchangeTokensErrorMessage}\n                    />\n                    <center>\n                      <Button\n                        size=\"large\"\n                        loading={this.state.exchangeTokensLoading}\n                        color=\"teal\"\n                      >\n                        {this.state.exchangeButtonText}\n                      </Button>\n                    </center>\n                  </Form>\n                </Card>\n              </center>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default TokenWallet;\n"]},"metadata":{},"sourceType":"module"}