{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nclass TokenWallet extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      exchangeTokensErrorMessage: \"\",\n      exchangeTokensLoading: false,\n      tokensToExchange: \"\",\n      userBalance: \"\",\n      exchangeRate: \"\",\n      blockCost: \"\"\n    });\n\n    _defineProperty(this, \"sellTokens\", async event => {\n      event.preventDefault();\n      this.setState({\n        exchangeTokensLoading: true,\n        exchangeTokensErrorMessage: \"\"\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await tokenFactory.methods.createToken(this.state.tokenName, this.state.tokenSymbol, this.state.wholeTokens, this.state.decimals).send({\n          from: accounts[0]\n        });\n        Router.pushRoute(\"/funding\");\n      } catch (err) {\n        this.setState({\n          reserveTokenErrorMessage: err.message\n        });\n      }\n\n      this.setState({\n        reserveBlockLoading: false\n      });\n    });\n\n    _defineProperty(this, \"transferTokens\", async event => {\n      event.preventDefault();\n      this.setState({\n        transferTokensLoading: true,\n        transferTokensErrorMessage: \"\"\n      });\n      this.setState({\n        transferTokensLoading: false\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    this._isMounted = false;\n    const imToken = InvestMint(props.query.address);\n    const summary = await imToken.methods.getSummary().call();\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      tokensPerBlock: summary[2],\n      exchangeRate: summary[4],\n      blockCost: summary[3]\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.loadUserData();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  async loadUserData() {\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts[0]) {\n      const imToken = InvestMint(this.props.address);\n      const ub = await imToken.methods.balanceOf(accounts[0]).call();\n      this.setState({\n        userBalance: ub\n      });\n    }\n  }\n\n  render() {\n    return __jsx(Layout, {\n      page: \"wallet\"\n    }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"center\", null, __jsx(Card, null, __jsx(\"h2\", null, this.props.tokenName, \" | \", this.props.tokenSymbol), __jsx(\"p\", null, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.props.exchangeRate, \"ether\"), \" Ether\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\"), __jsx(\"br\", null), web3.utils.fromWei(this.state.userBalance, \"ether\")))))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 7\n    }, __jsx(\"h3\", null, \"Sell Tokens:\"), __jsx(Form, {\n      onSubmit: this.sellTokens,\n      error: !!this.state.sellTokensErrorMessage\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      label: this.props.tokenSymbol,\n      labelPosition: \"right\",\n      value: this.state.tokensToSell,\n      onChange: event => this.setState({\n        tokensToSell: event.target.value\n      })\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.sellTokensErrorMessage\n    }), __jsx(Button, {\n      loading: this.state.sellTokensLoading,\n      color: \"teal\"\n    }, \"Sell Tokens\")))), __jsx(Grid.Column, {\n      width: 10\n    }, __jsx(\"h3\", null, \"Transfer Tokens:\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\\xA0\", this.props.userBalance, \"\\xA0\", this.props.tokenSymbol)), __jsx(Form, {\n      onSubmit: this.transferTokens,\n      error: !!this.state.transferTokensErrorMessage\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Trasfer to:\"), __jsx(Input, {\n      placeholder: \"Wallet Address: 0x...\",\n      value: this.state.tokensToTransfer,\n      onChange: event => this.setState({\n        tokensToTransfer: event.target.value\n      })\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.transferTokensErrorMessage\n    }), __jsx(Button, {\n      color: \"teal\",\n      loading: this.state.transferTokensLoading\n    }, \"Transfer\")))));\n  }\n\n}\n\nexport default TokenWallet;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/wallet.js"],"names":["React","Component","Form","Button","Input","Message","Grid","Card","Layout","web3","InvestMint","Router","TokenWallet","exchangeTokensErrorMessage","exchangeTokensLoading","tokensToExchange","userBalance","exchangeRate","blockCost","event","preventDefault","setState","accounts","eth","getAccounts","tokenFactory","methods","createToken","state","tokenName","tokenSymbol","wholeTokens","decimals","send","from","pushRoute","err","reserveTokenErrorMessage","message","reserveBlockLoading","transferTokensLoading","transferTokensErrorMessage","getInitialProps","props","_isMounted","imToken","query","address","summary","getSummary","call","tokensPerBlock","componentDidMount","loadUserData","componentWillUnmount","ub","balanceOf","render","utils","fromWei","sellTokens","sellTokensErrorMessage","tokensToSell","target","value","sellTokensLoading","transferTokens","tokensToTransfer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nclass TokenWallet extends Component {\n  state = {\n    exchangeTokensErrorMessage: \"\",\n    exchangeTokensLoading: false,\n    tokensToExchange: \"\",\n    userBalance: \"\",\n    exchangeRate: \"\",\n    blockCost: \"\"\n  };\n\n  static async getInitialProps(props) {\n    this._isMounted = false;\n    const imToken = InvestMint(props.query.address);\n    const summary = await imToken.methods.getSummary().call();\n\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      tokensPerBlock: summary[2],\n      exchangeRate: summary[4],\n      blockCost: summary[3]\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.loadUserData();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  sellTokens = async event => {\n    event.preventDefault();\n    this.setState({\n      exchangeTokensLoading: true,\n      exchangeTokensErrorMessage: \"\"\n    });\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      await tokenFactory.methods\n        .createToken(\n          this.state.tokenName,\n          this.state.tokenSymbol,\n          this.state.wholeTokens,\n          this.state.decimals\n        )\n        .send({\n          from: accounts[0]\n        });\n\n      Router.pushRoute(\"/funding\");\n    } catch (err) {\n      this.setState({ reserveTokenErrorMessage: err.message });\n    }\n\n    this.setState({ reserveBlockLoading: false });\n  };\n\n  async loadUserData() {\n    const accounts = await web3.eth.getAccounts();\n    if (accounts[0]) {\n      const imToken = InvestMint(this.props.address);\n      const ub = await imToken.methods.balanceOf(accounts[0]).call();\n      this.setState({ userBalance: ub });\n    }\n  }\n\n  transferTokens = async event => {\n    event.preventDefault();\n\n    this.setState({\n      transferTokensLoading: true,\n      transferTokensErrorMessage: \"\"\n    });\n    this.setState({ transferTokensLoading: false });\n  };\n\n  render() {\n    return (\n      <Layout page=\"wallet\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <center>\n                <Card>\n                  <h2>\n                    {this.props.tokenName} | {this.props.tokenSymbol}\n                  </h2>\n                  <p>\n                    1 {this.props.tokenSymbol} ={\" \"}\n                    {web3.utils.fromWei(this.props.exchangeRate, \"ether\")} Ether\n                  </p>\n                  <p>\n                    <strong>Balance:</strong>\n                    <br />\n                    {web3.utils.fromWei(this.state.userBalance, \"ether\")}\n                  </p>\n                </Card>\n              </center>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={7}>\n              <h3>Sell Tokens:</h3>\n              <Form\n                onSubmit={this.sellTokens}\n                error={!!this.state.sellTokensErrorMessage}\n              >\n                <Form.Field>\n                  <Input\n                    label={this.props.tokenSymbol}\n                    labelPosition=\"right\"\n                    value={this.state.tokensToSell}\n                    onChange={event =>\n                      this.setState({ tokensToSell: event.target.value })\n                    }\n                  />\n                </Form.Field>\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.sellTokensErrorMessage}\n                />\n                <Button loading={this.state.sellTokensLoading} color=\"teal\">\n                  Sell Tokens\n                </Button>\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Column width={10}>\n            <h3>Transfer Tokens:</h3>\n            <p>\n              <strong>\n                Balance:&nbsp;{this.props.userBalance}&nbsp;\n                {this.props.tokenSymbol}\n              </strong>\n            </p>\n            <Form\n              onSubmit={this.transferTokens}\n              error={!!this.state.transferTokensErrorMessage}\n            >\n              <Form.Field>\n                <label>Trasfer to:</label>\n                <Input\n                  placeholder=\"Wallet Address: 0x...\"\n                  value={this.state.tokensToTransfer}\n                  onChange={event =>\n                    this.setState({ tokensToTransfer: event.target.value })\n                  }\n                />\n              </Form.Field>\n              <Message\n                error\n                header=\"Oops!\"\n                content={this.state.transferTokensErrorMessage}\n              />\n              <Button color=\"teal\" loading={this.state.transferTokensLoading}>\n                Transfer\n              </Button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default TokenWallet;\n"]},"metadata":{},"sourceType":"module"}