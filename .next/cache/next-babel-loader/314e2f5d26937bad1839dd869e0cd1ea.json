{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Grid, Form, Button, Input, Message, Select, Icon, Table } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nvar TokenMintNew = /*#__PURE__*/function (_Component) {\n  _inherits(TokenMintNew, _Component);\n\n  var _super = _createSuper(TokenMintNew);\n\n  function TokenMintNew() {\n    var _this;\n\n    _classCallCheck(this, TokenMintNew);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      tokenName: \"\",\n      tokenSymbol: \"\",\n      wholeTokens: \"0\",\n      decimals: \"18\",\n      errorMessage: \"\",\n      calculateErrorMessage: \"\",\n      tokensPerBlock: \"1000\",\n      potentialInvestors: \"100\",\n      projectedProfits: \"0\",\n      initialPoolPercentage: \"10\",\n      minimumReturn: \"10\",\n      blocksToStabilize: \"75\",\n      blockPricingInput1: \"2\",\n      blockPricingInput2: \"#\",\n      blockPricingOperand: \"*\",\n      coinsToStabilize: \"\",\n      mintFeePostStable: \"0.1\",\n      s2: \"\",\n      s3: \"\",\n      s4: \"\",\n      s5: \"\",\n      s1ProfitsAtStabilization: \"\",\n      s2ProfitsAtStabilization: \"\",\n      s3ProfitsAtStabilization: \"\",\n      s4ProfitsAtStabilization: \"\",\n      s5ProfitsAtStabilization: \"\",\n      s1BlocksToProfit: \"\",\n      s2BlocksToProfit: \"\",\n      s3BlocksToProfit: \"\",\n      s4BlocksToProfit: \"\",\n      s5BlocksToProfit: \"\",\n      s1BlockCost: \"\",\n      s2BlockCost: \"\",\n      s3BlockCost: \"\",\n      s4BlockCost: \"\",\n      s5BlockCost: \"\",\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculate\", function (event) {\n      event.preventDefault();\n      var sampleSize = parseInt(parseInt(_this.state.potentialInvestors) / 5);\n      var numCoinsToStabilize = parseFloat(_this.state.blocksToStabilize) * parseFloat(_this.state.tokensPerBlock);\n      var sample2 = sampleSize < 2 ? 2 : sampleSize;\n      var sample3 = sampleSize * 2 < 3 ? 3 : sampleSize * 2;\n      var sample4 = sampleSize * 3 < 4 ? 4 : sampleSize * 3;\n      var sample5 = parseInt(_this.state.potentialInvestors) < 5 ? 5 : parseInt(_this.state.potentialInvestors);\n\n      _this.setState({\n        coinsToStabilize: numCoinsToStabilize,\n        s2: sample2,\n        s3: sample3,\n        s4: sample4,\n        s5: sample5\n      });\n\n      var operand = _this.state.blockPricingOperand;\n      var pricingInput1 = _this.state.blockPricingInput1 == \"#\" ? \"#\" : parseFloat(_this.state.blockPricingInput1);\n      var pricingInput2 = _this.state.blockPricingInput2 == \"#\" ? \"#\" : parseFloat(_this.state.blockPricingInput2);\n      var startingPrice = parseFloat(_this.state.startingPrice);\n      var tokensPerBlock = parseInt(_this.state.tokensPerBlock);\n\n      function getCost(blockNumber) {\n        console.log(\"Block #: \", blockNumber);\n        console.log(\"Input 1: \", pricingInput1);\n        console.log(\"operand: \", operand);\n        console.log(\"Input 2: \", pricingInput2);\n        console.log(\"Starting price: \", startingPrice);\n        console.log(\"tokens per block: \", tokensPerBlock);\n        var adjustment = 0;\n\n        switch (operand) {\n          case \"*\":\n            if (pricingInput1 == \"#\") {\n              adjustment = blockNumber * pricingInput2;\n            } else {\n              adjustment = pricingInput1 * blockNumber;\n            }\n\n            break;\n\n          case \"^\":\n            if (pricingInput1 == \"#\") {\n              adjustment = Math.pow(blockNumber, pricingInput2);\n            } else {\n              adjustment = Math.pow(pricingInput1, blockNumber);\n            }\n\n            break;\n\n          case \"+\":\n            if (pricingInput1 == \"#\") {\n              adjustment = blockNumber + pricingInput2;\n            } else {\n              adjustment = pricingInput1 + blockNumber;\n            }\n\n            break;\n\n          case \"-\":\n            if (pricingInput1 == \"#\") {\n              adjustment = blockNumber - pricingInput2;\n            } else {\n              adjustment = pricingInput1 - blockNumber;\n            }\n\n            break;\n\n          case \"/\":\n            if (pricingInput1 == \"#\") {\n              adjustment = blockNumber / pricingInput2;\n            } else {\n              adjustment = pricingInput1 / blockNumber;\n            }\n\n            break;\n\n          default:\n            if (pricingInput1 == \"#\") {\n              adjustment = blockNumber * pricingInput2;\n            } else {\n              adjustment = pricingInput1 * blockNumber;\n            }\n\n            break;\n        }\n\n        var blockCost = startingPrice * tokensPerBlock * adjustment;\n        return blockCost;\n      }\n\n      _this.setState({\n        s1BlockCost: getCost(1),\n        s2BlockCost: getCost(sample2),\n        s3BlockCost: getCost(sample3),\n        s4BlockCost: getCost(sample4),\n        s5BlockCost: getCost(sample5)\n      });\n\n      var targetPrice = parseInt(_this.state.potentialInvestors) > 5 ? 5 * parseFloat(_this.state.s5BlockCost) * parseFloat(_this.state.minimumReturn) : parseInt(_this.state.potentialInvestors) * parseFloat(_this.state.s5BlockCost) * parseFloat(_this.state.minimumReturn);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: \"\"\n                });\n\n                _context.prev = 2;\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n\n                /*await tokenMintFactory.methods\n                  .createToken(\n                    this.state.tokenName,\n                    this.state.tokenSymbol,\n                    this.state.wholeTokens,\n                    this.state.decimals\n                  )\n                  .send({\n                    from: accounts[0]\n                  });*/\n                Router.pushRoute(\"/funding\");\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 12:\n                _this.setState({\n                  loading: false\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 9]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(TokenMintNew, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        page: \"create\"\n      }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h2\", null, \"Create a Mintable ERC-20 Token\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, \"Token Details\"))), __jsx(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage\n      }, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        widths: \"equal\"\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Token Name\"), __jsx(Input, {\n        value: this.state.tokenName,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokenName: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Token Symbol\"), __jsx(Input, {\n        value: this.state.tokenSymbol,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokenSymbol: event.target.value\n          });\n        }\n      }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        widths: \"equal\"\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Decimals\"), __jsx(Input, {\n        value: this.state.decimals,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            decimals: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Tokens Per Block\"), __jsx(Input, {\n        value: this.state.tokensPerBlock,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokensPerBlock: event.target.value\n          });\n        }\n      }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), __jsx(\"br\", null)))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, \"Profit Calculator\"))), __jsx(Form, {\n        onSubmit: this.calculate,\n        error: !!this.state.calculateErrorMessage\n      }, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        widths: \"equal\"\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Potential Investors\"), __jsx(Input, {\n        value: this.state.potentialInvestors,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            potentialInvestors: event.target.value\n          });\n        }\n      }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        widths: \"equal\"\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Projected Profits\"), __jsx(Input, {\n        label: \"ether\",\n        labelPosition: \"right\",\n        value: this.state.projectedProfits,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            projectedProfits: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"% of Profits to Pool\"), __jsx(Input, {\n        label: \"%\",\n        labelPosition: \"right\",\n        value: this.state.initialPoolPercentage,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            initialPoolPercentage: event.target.value\n          });\n        }\n      }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        widths: \"equal\"\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Minimum Return\"), __jsx(Input, {\n        label: \"X\",\n        labelPosition: \"right\",\n        value: this.state.minimumReturn,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            minimumReturn: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Blocks to Stabilize\"), __jsx(Input, {\n        value: this.state.blocksToStabilize,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            blocksToStabilize: event.target.value\n          });\n        }\n      }))), __jsx(\"br\", null))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        inline: true\n      }, __jsx(Form.Field, {\n        label: \"Mint Fee Pricing:\",\n        control: \"select\",\n        value: this.state.blockPricingInput1,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            blockPricingInput1: event.target.value,\n            blockPricingInput2: event.target.value != \"#\" ? \"#\" : _this2.state.blockPricingInput2\n          });\n        }\n      }, __jsx(\"option\", {\n        value: \"#\"\n      }, \"Number of Blocks\"), __jsx(\"option\", {\n        value: \"0.5\"\n      }, \"0.5\"), __jsx(\"option\", {\n        value: \"1\"\n      }, \"1\"), __jsx(\"option\", {\n        value: \"2\"\n      }, \"2\"), __jsx(\"option\", {\n        value: \"3\"\n      }, \"3\"), __jsx(\"option\", {\n        value: \"4\"\n      }, \"4\"), __jsx(\"option\", {\n        value: \"5\"\n      }, \"5\"), __jsx(\"option\", {\n        value: \"6\"\n      }, \"6\"), __jsx(\"option\", {\n        value: \"7\"\n      }, \"7\"), __jsx(\"option\", {\n        value: \"8\"\n      }, \"8\"), __jsx(\"option\", {\n        value: \"9\"\n      }, \"9\"), __jsx(\"option\", {\n        value: \"10\"\n      }, \"10\"), __jsx(\"option\", {\n        value: \"20\"\n      }, \"20\"), __jsx(\"option\", {\n        value: \"30\"\n      }, \"30\"), __jsx(\"option\", {\n        value: \"40\"\n      }, \"40\"), __jsx(\"option\", {\n        value: \"50\"\n      }, \"50\"), __jsx(\"option\", {\n        value: \"60\"\n      }, \"60\"), __jsx(\"option\", {\n        value: \"70\"\n      }, \"70\"), __jsx(\"option\", {\n        value: \"80\"\n      }, \"80\"), __jsx(\"option\", {\n        value: \"90\"\n      }, \"90\"), __jsx(\"option\", {\n        value: \"100\"\n      }, \"100\"), __jsx(\"option\", {\n        value: \"200\"\n      }, \"200\"), __jsx(\"option\", {\n        value: \"300\"\n      }, \"300\"), __jsx(\"option\", {\n        value: \"400\"\n      }, \"400\"), __jsx(\"option\", {\n        value: \"500\"\n      }, \"500\"), __jsx(\"option\", {\n        value: \"600\"\n      }, \"600\"), __jsx(\"option\", {\n        value: \"700\"\n      }, \"700\"), __jsx(\"option\", {\n        value: \"800\"\n      }, \"800\"), __jsx(\"option\", {\n        value: \"900\"\n      }, \"900\"), __jsx(\"option\", {\n        value: \"1000\"\n      }, \"1000\")), __jsx(Form.Field, {\n        control: \"select\",\n        value: this.state.blockPricingOperand,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            blockPricingOperand: event.target.value\n          });\n        }\n      }, __jsx(\"option\", {\n        value: \"*\"\n      }, \"*\"), __jsx(\"option\", {\n        value: \"^\"\n      }, \"^\"), __jsx(\"option\", {\n        value: \"+\"\n      }, \"+\"), __jsx(\"option\", {\n        value: \"-\"\n      }, \"-\"), __jsx(\"option\", {\n        value: \"/\"\n      }, \"/\")), __jsx(Form.Field, {\n        control: \"select\",\n        value: this.state.blockPricingInput2,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            blockPricingInput2: event.target.value,\n            blockPricingInput1: event.target.value != \"#\" ? \"#\" : _this2.state.blockPricingInput1\n          });\n        }\n      }, __jsx(\"option\", {\n        value: \"#\"\n      }, \"Number of Blocks\"), __jsx(\"option\", {\n        value: \"0.5\"\n      }, \"0.5\"), __jsx(\"option\", {\n        value: \"1\"\n      }, \"1\"), __jsx(\"option\", {\n        value: \"2\"\n      }, \"2\"), __jsx(\"option\", {\n        value: \"3\"\n      }, \"3\"), __jsx(\"option\", {\n        value: \"4\"\n      }, \"4\"), __jsx(\"option\", {\n        value: \"5\"\n      }, \"5\"), __jsx(\"option\", {\n        value: \"6\"\n      }, \"6\"), __jsx(\"option\", {\n        value: \"7\"\n      }, \"7\"), __jsx(\"option\", {\n        value: \"8\"\n      }, \"8\"), __jsx(\"option\", {\n        value: \"9\"\n      }, \"9\"), __jsx(\"option\", {\n        value: \"10\"\n      }, \"10\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n        color: \"teal\",\n        style: {\n          marginBottom: \"20px\"\n        }\n      }, \"Calculate\")))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, \"Summary:\"), __jsx(\"p\", null, \"This mint fee of\", \" \", __jsx(\"strong\", null, \"(\", this.state.blockPricingInput1 == \"#\" ? \"Block #\" : this.state.blockPricingInput1, \" \", this.state.blockPricingOperand, \" \", this.state.blockPricingInput2 == \"#\" ? \"Block #\" : this.state.blockPricingInput2, \")\"), \" \", \"will be in effect for the first\", \" \", __jsx(\"strong\", null, this.state.blocksToStabilize, \" blocks (\", this.state.coinsToStabilize, \" tokens)\"), \".\"), __jsx(\"p\", null, \"The price will stabilize at \", __jsx(\"strong\", null, \"xxx.xx ether\"), \" per token with a stable mint fee of \", __jsx(\"strong\", null, \"xxx.xx ETH\"), \".\"), __jsx(\"p\", null, \"Assuming \", __jsx(\"strong\", null, this.state.initialPoolPercentage, \"%\"), \" of profits of \", __jsx(\"strong\", null, this.state.projectedProfits, \" ether\"), \" \", \"are contributed to the liquidity pool:\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n        celled: true\n      }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Block\"), __jsx(Table.HeaderCell, null, \"Cost\"), __jsx(Table.HeaderCell, null, \"Blocks to Break Even\"), __jsx(Table.HeaderCell, null, \"Blocks to \", this.state.minimumReturn, \"X\"))), __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Block #1\"), __jsx(Table.Cell, null, this.state.s1BlockCost, \" ETH\"), __jsx(Table.Cell, null, this.state.s1BlocksToProfit), __jsx(Table.Cell, null, \"xxx\")), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Block #\", this.state.s2), __jsx(Table.Cell, null, this.state.s2BlockCost, \" ETH\"), __jsx(Table.Cell, null, this.state.s2BlocksToProfit), __jsx(Table.Cell, null, \"xxx\")), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Block #\", this.state.s3), __jsx(Table.Cell, null, this.state.s3BlockCost, \" ETH\"), __jsx(Table.Cell, null, this.state.s3BlocksToProfit), __jsx(Table.Cell, null, \"xxx\")), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Block #\", this.state.s4), __jsx(Table.Cell, null, this.state.s4BlockCost, \" ETH\"), __jsx(Table.Cell, {\n        negative: true\n      }, this.state.s4BlocksToProfit), __jsx(Table.Cell, {\n        negative: true\n      }, \"Too Many\")), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Block #\", this.state.s5), __jsx(Table.Cell, null, this.state.s5BlockCost, \" ETH\"), __jsx(Table.Cell, {\n        negative: true\n      }, this.state.s5BlocksToProfit), __jsx(Table.Cell, {\n        negative: true\n      }, \"Too Many\"))))))), __jsx(\"br\", null));\n    }\n  }]);\n\n  return TokenMintNew;\n}(Component);\n\nexport default TokenMintNew;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/new.js"],"names":["React","Component","Grid","Form","Button","Input","Message","Select","Icon","Table","Layout","web3","Router","TokenMintNew","tokenName","tokenSymbol","wholeTokens","decimals","errorMessage","calculateErrorMessage","tokensPerBlock","potentialInvestors","projectedProfits","initialPoolPercentage","minimumReturn","blocksToStabilize","blockPricingInput1","blockPricingInput2","blockPricingOperand","coinsToStabilize","mintFeePostStable","s2","s3","s4","s5","s1ProfitsAtStabilization","s2ProfitsAtStabilization","s3ProfitsAtStabilization","s4ProfitsAtStabilization","s5ProfitsAtStabilization","s1BlocksToProfit","s2BlocksToProfit","s3BlocksToProfit","s4BlocksToProfit","s5BlocksToProfit","s1BlockCost","s2BlockCost","s3BlockCost","s4BlockCost","s5BlockCost","loading","event","preventDefault","sampleSize","parseInt","state","numCoinsToStabilize","parseFloat","sample2","sample3","sample4","sample5","setState","operand","pricingInput1","pricingInput2","startingPrice","getCost","blockNumber","console","log","adjustment","Math","pow","blockCost","targetPrice","eth","getAccounts","accounts","pushRoute","message","onSubmit","target","value","calculate","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Grid,\n  Form,\n  Button,\n  Input,\n  Message,\n  Select,\n  Icon,\n  Table\n} from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nclass TokenMintNew extends Component {\n  state = {\n    tokenName: \"\",\n    tokenSymbol: \"\",\n    wholeTokens: \"0\",\n    decimals: \"18\",\n    errorMessage: \"\",\n    calculateErrorMessage: \"\",\n    tokensPerBlock: \"1000\",\n    potentialInvestors: \"100\",\n    projectedProfits: \"0\",\n    initialPoolPercentage: \"10\",\n    minimumReturn: \"10\",\n    blocksToStabilize: \"75\",\n    blockPricingInput1: \"2\",\n    blockPricingInput2: \"#\",\n    blockPricingOperand: \"*\",\n    coinsToStabilize: \"\",\n    mintFeePostStable: \"0.1\",\n    s2: \"\",\n    s3: \"\",\n    s4: \"\",\n    s5: \"\",\n    s1ProfitsAtStabilization: \"\",\n    s2ProfitsAtStabilization: \"\",\n    s3ProfitsAtStabilization: \"\",\n    s4ProfitsAtStabilization: \"\",\n    s5ProfitsAtStabilization: \"\",\n    s1BlocksToProfit: \"\",\n    s2BlocksToProfit: \"\",\n    s3BlocksToProfit: \"\",\n    s4BlocksToProfit: \"\",\n    s5BlocksToProfit: \"\",\n    s1BlockCost: \"\",\n    s2BlockCost: \"\",\n    s3BlockCost: \"\",\n    s4BlockCost: \"\",\n    s5BlockCost: \"\",\n    loading: false\n  };\n\n  calculate = event => {\n    event.preventDefault();\n\n    var sampleSize = parseInt(parseInt(this.state.potentialInvestors) / 5);\n    var numCoinsToStabilize =\n      parseFloat(this.state.blocksToStabilize) *\n      parseFloat(this.state.tokensPerBlock);\n    var sample2 = sampleSize < 2 ? 2 : sampleSize;\n    var sample3 = sampleSize * 2 < 3 ? 3 : sampleSize * 2;\n    var sample4 = sampleSize * 3 < 4 ? 4 : sampleSize * 3;\n    var sample5 =\n      parseInt(this.state.potentialInvestors) < 5\n        ? 5\n        : parseInt(this.state.potentialInvestors);\n    this.setState({\n      coinsToStabilize: numCoinsToStabilize,\n      s2: sample2,\n      s3: sample3,\n      s4: sample4,\n      s5: sample5\n    });\n\n    var operand = this.state.blockPricingOperand;\n    var pricingInput1 =\n      this.state.blockPricingInput1 == \"#\"\n        ? \"#\"\n        : parseFloat(this.state.blockPricingInput1);\n    var pricingInput2 =\n      this.state.blockPricingInput2 == \"#\"\n        ? \"#\"\n        : parseFloat(this.state.blockPricingInput2);\n    var startingPrice = parseFloat(this.state.startingPrice);\n    var tokensPerBlock = parseInt(this.state.tokensPerBlock);\n\n    function getCost(blockNumber) {\n      console.log(\"Block #: \", blockNumber);\n      console.log(\"Input 1: \", pricingInput1);\n      console.log(\"operand: \", operand);\n      console.log(\"Input 2: \", pricingInput2);\n      console.log(\"Starting price: \", startingPrice);\n      console.log(\"tokens per block: \", tokensPerBlock);\n      var adjustment = 0;\n      switch (operand) {\n        case \"*\":\n          if (pricingInput1 == \"#\") {\n            adjustment = blockNumber * pricingInput2;\n          } else {\n            adjustment = pricingInput1 * blockNumber;\n          }\n          break;\n        case \"^\":\n          if (pricingInput1 == \"#\") {\n            adjustment = Math.pow(blockNumber, pricingInput2);\n          } else {\n            adjustment = Math.pow(pricingInput1, blockNumber);\n          }\n          break;\n        case \"+\":\n          if (pricingInput1 == \"#\") {\n            adjustment = blockNumber + pricingInput2;\n          } else {\n            adjustment = pricingInput1 + blockNumber;\n          }\n          break;\n        case \"-\":\n          if (pricingInput1 == \"#\") {\n            adjustment = blockNumber - pricingInput2;\n          } else {\n            adjustment = pricingInput1 - blockNumber;\n          }\n          break;\n        case \"/\":\n          if (pricingInput1 == \"#\") {\n            adjustment = blockNumber / pricingInput2;\n          } else {\n            adjustment = pricingInput1 / blockNumber;\n          }\n          break;\n        default:\n          if (pricingInput1 == \"#\") {\n            adjustment = blockNumber * pricingInput2;\n          } else {\n            adjustment = pricingInput1 * blockNumber;\n          }\n          break;\n      }\n      var blockCost = startingPrice * tokensPerBlock * adjustment;\n      return blockCost;\n    }\n\n    this.setState({\n      s1BlockCost: getCost(1),\n      s2BlockCost: getCost(sample2),\n      s3BlockCost: getCost(sample3),\n      s4BlockCost: getCost(sample4),\n      s5BlockCost: getCost(sample5)\n    });\n\n    var targetPrice =\n      parseInt(this.state.potentialInvestors) > 5\n        ? 5 *\n          parseFloat(this.state.s5BlockCost) *\n          parseFloat(this.state.minimumReturn)\n        : parseInt(this.state.potentialInvestors) *\n          parseFloat(this.state.s5BlockCost) *\n          parseFloat(this.state.minimumReturn);\n  };\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({ loading: true, errorMessage: \"\" });\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      /*await tokenMintFactory.methods\n        .createToken(\n          this.state.tokenName,\n          this.state.tokenSymbol,\n          this.state.wholeTokens,\n          this.state.decimals\n        )\n        .send({\n          from: accounts[0]\n        });*/\n\n      Router.pushRoute(\"/funding\");\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    }\n\n    this.setState({ loading: false });\n  };\n\n  render() {\n    return (\n      <Layout page=\"create\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <h2>Create a Mintable ERC-20 Token</h2>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <h3>Token Details</h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Token Name</label>\n                    <Input\n                      value={this.state.tokenName}\n                      onChange={event =>\n                        this.setState({ tokenName: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Token Symbol</label>\n                    <Input\n                      value={this.state.tokenSymbol}\n                      onChange={event =>\n                        this.setState({ tokenSymbol: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Decimals</label>\n                    <Input\n                      value={this.state.decimals}\n                      onChange={event =>\n                        this.setState({ decimals: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Tokens Per Block</label>\n                    <Input\n                      value={this.state.tokensPerBlock}\n                      onChange={event =>\n                        this.setState({ tokensPerBlock: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.errorMessage}\n                />\n                <br />\n              </Grid.Column>\n            </Grid.Row>\n          </Form>\n          <Grid.Row>\n            <Grid.Column>\n              <h3>Profit Calculator</h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Form\n            onSubmit={this.calculate}\n            error={!!this.state.calculateErrorMessage}\n          >\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Potential Investors</label>\n                    <Input\n                      value={this.state.potentialInvestors}\n                      onChange={event =>\n                        this.setState({\n                          potentialInvestors: event.target.value\n                        })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Projected Profits</label>\n                    <Input\n                      label=\"ether\"\n                      labelPosition=\"right\"\n                      value={this.state.projectedProfits}\n                      onChange={event =>\n                        this.setState({ projectedProfits: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>% of Profits to Pool</label>\n                    <Input\n                      label=\"%\"\n                      labelPosition=\"right\"\n                      value={this.state.initialPoolPercentage}\n                      onChange={event =>\n                        this.setState({\n                          initialPoolPercentage: event.target.value\n                        })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Minimum Return</label>\n                    <Input\n                      label=\"X\"\n                      labelPosition=\"right\"\n                      value={this.state.minimumReturn}\n                      onChange={event =>\n                        this.setState({ minimumReturn: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Blocks to Stabilize</label>\n                    <Input\n                      value={this.state.blocksToStabilize}\n                      onChange={event =>\n                        this.setState({ blocksToStabilize: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n                <br />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group inline>\n                  <Form.Field\n                    label=\"Mint Fee Pricing:\"\n                    control=\"select\"\n                    value={this.state.blockPricingInput1}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingInput1: event.target.value,\n                        blockPricingInput2:\n                          event.target.value != \"#\"\n                            ? \"#\"\n                            : this.state.blockPricingInput2\n                      })\n                    }\n                  >\n                    <option value=\"#\">Number of Blocks</option>\n                    <option value=\"0.5\">0.5</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"30\">30</option>\n                    <option value=\"40\">40</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"60\">60</option>\n                    <option value=\"70\">70</option>\n                    <option value=\"80\">80</option>\n                    <option value=\"90\">90</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                    <option value=\"300\">300</option>\n                    <option value=\"400\">400</option>\n                    <option value=\"500\">500</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                    <option value=\"800\">800</option>\n                    <option value=\"900\">900</option>\n                    <option value=\"1000\">1000</option>\n                  </Form.Field>\n                  <Form.Field\n                    control=\"select\"\n                    value={this.state.blockPricingOperand}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingOperand: event.target.value\n                      })\n                    }\n                  >\n                    <option value=\"*\">*</option>\n                    <option value=\"^\">^</option>\n                    <option value=\"+\">+</option>\n                    <option value=\"-\">-</option>\n                    <option value=\"/\">/</option>\n                  </Form.Field>\n                  <Form.Field\n                    control=\"select\"\n                    value={this.state.blockPricingInput2}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingInput2: event.target.value,\n                        blockPricingInput1:\n                          event.target.value != \"#\"\n                            ? \"#\"\n                            : this.state.blockPricingInput1\n                      })\n                    }\n                  >\n                    <option value=\"#\">Number of Blocks</option>\n                    <option value=\"0.5\">0.5</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Button\n                  color=\"teal\"\n                  style={{\n                    marginBottom: \"20px\"\n                  }}\n                >\n                  Calculate\n                </Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Form>\n          <Grid.Row>\n            <Grid.Column>\n              <h3>Summary:</h3>\n              <p>\n                This mint fee of{\" \"}\n                <strong>\n                  (\n                  {this.state.blockPricingInput1 == \"#\"\n                    ? \"Block #\"\n                    : this.state.blockPricingInput1}{\" \"}\n                  {this.state.blockPricingOperand}{\" \"}\n                  {this.state.blockPricingInput2 == \"#\"\n                    ? \"Block #\"\n                    : this.state.blockPricingInput2}\n                  )\n                </strong>{\" \"}\n                will be in effect for the first{\" \"}\n                <strong>\n                  {this.state.blocksToStabilize} blocks (\n                  {this.state.coinsToStabilize} tokens)\n                </strong>\n                .\n              </p>\n              <p>\n                The price will stabilize at <strong>xxx.xx ether</strong> per\n                token with a stable mint fee of <strong>xxx.xx ETH</strong>.\n              </p>\n              <p>\n                Assuming <strong>{this.state.initialPoolPercentage}%</strong> of\n                profits of <strong>{this.state.projectedProfits} ether</strong>{\" \"}\n                are contributed to the liquidity pool:\n              </p>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Table celled>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Block</Table.HeaderCell>\n                    <Table.HeaderCell>Cost</Table.HeaderCell>\n                    <Table.HeaderCell>Blocks to Break Even</Table.HeaderCell>\n                    <Table.HeaderCell>\n                      Blocks to {this.state.minimumReturn}X\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                  <Table.Row>\n                    <Table.Cell>Block #1</Table.Cell>\n                    <Table.Cell>{this.state.s1BlockCost} ETH</Table.Cell>\n                    <Table.Cell>{this.state.s1BlocksToProfit}</Table.Cell>\n                    <Table.Cell>xxx</Table.Cell>\n                  </Table.Row>\n                  <Table.Row>\n                    <Table.Cell>Block #{this.state.s2}</Table.Cell>\n                    <Table.Cell>{this.state.s2BlockCost} ETH</Table.Cell>\n                    <Table.Cell>{this.state.s2BlocksToProfit}</Table.Cell>\n                    <Table.Cell>xxx</Table.Cell>\n                  </Table.Row>\n                  <Table.Row>\n                    <Table.Cell>Block #{this.state.s3}</Table.Cell>\n                    <Table.Cell>{this.state.s3BlockCost} ETH</Table.Cell>\n                    <Table.Cell>{this.state.s3BlocksToProfit}</Table.Cell>\n                    <Table.Cell>xxx</Table.Cell>\n                  </Table.Row>\n                  <Table.Row>\n                    <Table.Cell>Block #{this.state.s4}</Table.Cell>\n                    <Table.Cell>{this.state.s4BlockCost} ETH</Table.Cell>\n                    <Table.Cell negative>\n                      {this.state.s4BlocksToProfit}\n                    </Table.Cell>\n                    <Table.Cell negative>Too Many</Table.Cell>\n                  </Table.Row>\n                  <Table.Row>\n                    <Table.Cell>Block #{this.state.s5}</Table.Cell>\n                    <Table.Cell>{this.state.s5BlockCost} ETH</Table.Cell>\n                    <Table.Cell negative>\n                      {this.state.s5BlocksToProfit}\n                    </Table.Cell>\n                    <Table.Cell negative>Too Many</Table.Cell>\n                  </Table.Row>\n                </Table.Body>\n              </Table>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <br />\n      </Layout>\n    );\n  }\n}\n\nexport default TokenMintNew;\n"]},"metadata":{},"sourceType":"module"}