{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport Token from \"../../ethereum/token\";\nimport { Router } from \"../../routes\";\n\nvar TokenShow = /*#__PURE__*/function (_Component) {\n  _inherits(TokenShow, _Component);\n\n  var _super = _createSuper(TokenShow);\n\n  function TokenShow() {\n    var _this;\n\n    _classCallCheck(this, TokenShow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      reserveBlockErrorMessage: \"\",\n      sellTokensErrorMessage: \"\",\n      reserveBlockLoading: false,\n      sellTokensLoading: false,\n      tokensToSell: \"\",\n      tokensToTransfer: \"\",\n      transferToAddress: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"reserveTokenBlock\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  reserveBlockLoading: true,\n                  reserveBlockErrorMessage: \"\"\n                }); // try {\n                //   const accounts = await web3.eth.getAccounts();\n                //   await tokenFactory.methods\n                //     .createToken(\n                //       this.state.tokenName,\n                //       this.state.tokenSymbol,\n                //       this.state.wholeTokens,\n                //       this.state.decimals\n                //     )\n                //     .send({\n                //       from: accounts[0]\n                //     });\n                //\n                //   Router.pushRoute(\"/funding\");\n                // } catch (err) {\n                //   this.setState({ reserveTokenErrorMessage: err.message });\n                // }\n\n\n                _this.setState({\n                  reserveBlockLoading: false\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"sellTokens\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  sellTokensLoading: true,\n                  sellTokensErrorMessage: \"\"\n                });\n\n                _this.setState({\n                  sellTokensLoading: false\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"transferTokens\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  transferTokensLoading: true,\n                  transferTokensErrorMessage: \"\"\n                });\n\n                _this.setState({\n                  transferTokensLoading: false\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(TokenShow, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        page: \"wallet\"\n      }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h2\", null, this.props.tokenName, \" | \", this.props.tokenSymbol))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, \"Token Address: \", this.props.address))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 16\n      }, __jsx(\"h3\", null, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.props.exchangeRate, \"ether\"), \" Ether\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 7\n      }, __jsx(\"h3\", null, \"Sell Tokens:\"), __jsx(Form, {\n        onSubmit: this.sellTokens,\n        error: !!this.state.sellTokensErrorMessage\n      }, __jsx(Form.Field, null, __jsx(Input, {\n        label: this.props.tokenSymbol,\n        labelPosition: \"right\",\n        value: this.state.tokensToSell,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokensToSell: event.target.value\n          });\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.sellTokensErrorMessage\n      }), __jsx(Button, {\n        loading: this.state.sellTokensLoading,\n        color: \"teal\"\n      }, \"Sell Tokens\")))), __jsx(Grid.Column, {\n        width: 10\n      }, __jsx(\"h3\", null, \"Transfer Tokens:\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\\xA0\", this.props.userBalance, \"\\xA0\", this.props.tokenSymbol)), __jsx(Form, {\n        onSubmit: this.transferTokens,\n        error: !!this.state.transferTokensErrorMessage\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Trasfer to:\"), __jsx(Input, {\n        placeholder: \"Wallet Address: 0x...\",\n        value: this.state.tokensToTransfer,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokensToTransfer: event.target.value\n          });\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.transferTokensErrorMessage\n      }), __jsx(Button, {\n        color: \"teal\",\n        loading: this.state.transferTokensLoading\n      }, \"Transfer\")))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(props) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", {\n                  address: props.query.address,\n                  tokenName: \"Token Name\",\n                  tokenSymbol: \"TKNS\",\n                  userBalance: \"2004.110\",\n                  exchangeRate: \"10000503000000000\",\n                  blockCost: \"1000000000023400000\",\n                  tokensPerBlock: \"1000\"\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getInitialProps(_x4) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return TokenShow;\n}(Component);\n\nexport default TokenShow;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/wallet.js"],"names":["React","Component","Form","Button","Input","Message","Grid","Layout","web3","Token","Router","TokenShow","reserveBlockErrorMessage","sellTokensErrorMessage","reserveBlockLoading","sellTokensLoading","tokensToSell","tokensToTransfer","transferToAddress","event","preventDefault","setState","transferTokensLoading","transferTokensErrorMessage","props","tokenName","tokenSymbol","address","utils","fromWei","exchangeRate","sellTokens","state","target","value","userBalance","transferTokens","query","blockCost","tokensPerBlock"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport Token from \"../../ethereum/token\";\nimport { Router } from \"../../routes\";\n\nclass TokenShow extends Component {\n  state = {\n    reserveBlockErrorMessage: \"\",\n    sellTokensErrorMessage: \"\",\n    reserveBlockLoading: false,\n    sellTokensLoading: false,\n    tokensToSell: \"\",\n    tokensToTransfer: \"\",\n    transferToAddress: \"\"\n  };\n\n  static async getInitialProps(props) {\n    //const project = Project(props.query.address);\n\n    //const summary = await project.methods.getSummary().call();\n\n    return {\n      address: props.query.address,\n      tokenName: \"Token Name\",\n      tokenSymbol: \"TKNS\",\n      userBalance: \"2004.110\",\n      exchangeRate: \"10000503000000000\",\n      blockCost: \"1000000000023400000\",\n      tokensPerBlock: \"1000\"\n    };\n  }\n\n  reserveTokenBlock = async event => {\n    event.preventDefault();\n\n    this.setState({ reserveBlockLoading: true, reserveBlockErrorMessage: \"\" });\n\n    // try {\n    //   const accounts = await web3.eth.getAccounts();\n    //   await tokenFactory.methods\n    //     .createToken(\n    //       this.state.tokenName,\n    //       this.state.tokenSymbol,\n    //       this.state.wholeTokens,\n    //       this.state.decimals\n    //     )\n    //     .send({\n    //       from: accounts[0]\n    //     });\n    //\n    //   Router.pushRoute(\"/funding\");\n    // } catch (err) {\n    //   this.setState({ reserveTokenErrorMessage: err.message });\n    // }\n\n    this.setState({ reserveBlockLoading: false });\n  };\n\n  sellTokens = async event => {\n    event.preventDefault();\n\n    this.setState({ sellTokensLoading: true, sellTokensErrorMessage: \"\" });\n    this.setState({ sellTokensLoading: false });\n  };\n\n  transferTokens = async event => {\n    event.preventDefault();\n\n    this.setState({\n      transferTokensLoading: true,\n      transferTokensErrorMessage: \"\"\n    });\n    this.setState({ transferTokensLoading: false });\n  };\n\n  render() {\n    return (\n      <Layout page=\"wallet\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <h2>\n                {this.props.tokenName} | {this.props.tokenSymbol}\n              </h2>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <h3>Token Address: {this.props.address}</h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={16}>\n              <h3>\n                1 {this.props.tokenSymbol} ={\" \"}\n                {web3.utils.fromWei(this.props.exchangeRate, \"ether\")} Ether\n              </h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={7}>\n              <h3>Sell Tokens:</h3>\n              <Form\n                onSubmit={this.sellTokens}\n                error={!!this.state.sellTokensErrorMessage}\n              >\n                <Form.Field>\n                  <Input\n                    label={this.props.tokenSymbol}\n                    labelPosition=\"right\"\n                    value={this.state.tokensToSell}\n                    onChange={event =>\n                      this.setState({ tokensToSell: event.target.value })\n                    }\n                  />\n                </Form.Field>\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.sellTokensErrorMessage}\n                />\n                <Button loading={this.state.sellTokensLoading} color=\"teal\">\n                  Sell Tokens\n                </Button>\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Column width={10}>\n            <h3>Transfer Tokens:</h3>\n            <p>\n              <strong>\n                Balance:&nbsp;{this.props.userBalance}&nbsp;\n                {this.props.tokenSymbol}\n              </strong>\n            </p>\n            <Form\n              onSubmit={this.transferTokens}\n              error={!!this.state.transferTokensErrorMessage}\n            >\n              <Form.Field>\n                <label>Trasfer to:</label>\n                <Input\n                  placeholder=\"Wallet Address: 0x...\"\n                  value={this.state.tokensToTransfer}\n                  onChange={event =>\n                    this.setState({ tokensToTransfer: event.target.value })\n                  }\n                />\n              </Form.Field>\n              <Message\n                error\n                header=\"Oops!\"\n                content={this.state.transferTokensErrorMessage}\n              />\n              <Button color=\"teal\" loading={this.state.transferTokensLoading}>\n                Transfer\n              </Button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default TokenShow;\n"]},"metadata":{},"sourceType":"module"}