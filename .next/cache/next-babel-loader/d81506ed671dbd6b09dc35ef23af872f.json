{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport Token from \"../../ethereum/token\";\nimport { Router } from \"../../routes\";\n\nclass TokenShow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      reserveBlockErrorMessage: \"\",\n      sellTokensErrorMessage: \"\",\n      reserveBlockLoading: false,\n      sellTokensLoading: false,\n      tokensToSell: \"\",\n      tokensToTransfer: \"\",\n      transferToAddress: \"\"\n    });\n\n    _defineProperty(this, \"reserveTokenBlock\", async event => {\n      event.preventDefault();\n      this.setState({\n        reserveBlockLoading: true,\n        reserveBlockErrorMessage: \"\"\n      }); // try {\n      //   const accounts = await web3.eth.getAccounts();\n      //   await tokenFactory.methods\n      //     .createToken(\n      //       this.state.tokenName,\n      //       this.state.tokenSymbol,\n      //       this.state.wholeTokens,\n      //       this.state.decimals\n      //     )\n      //     .send({\n      //       from: accounts[0]\n      //     });\n      //\n      //   Router.pushRoute(\"/funding\");\n      // } catch (err) {\n      //   this.setState({ reserveTokenErrorMessage: err.message });\n      // }\n\n      this.setState({\n        reserveBlockLoading: false\n      });\n    });\n\n    _defineProperty(this, \"sellTokens\", async event => {\n      event.preventDefault();\n      this.setState({\n        sellTokensLoading: true,\n        sellTokensErrorMessage: \"\"\n      });\n      this.setState({\n        sellTokensLoading: false\n      });\n    });\n\n    _defineProperty(this, \"transferTokens\", async event => {\n      event.preventDefault();\n      this.setState({\n        transferTokensLoading: true,\n        transferTokensErrorMessage: \"\"\n      });\n      this.setState({\n        transferTokensLoading: false\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    //const project = Project(props.query.address);\n    //const summary = await project.methods.getSummary().call();\n    return {\n      address: props.query.address,\n      tokenName: \"Token Name\",\n      tokenSymbol: \"TKNS\",\n      userBalance: \"2004.110\",\n      exchangeRate: \"10000503000000000\",\n      blockCost: \"1000000000023400000\",\n      tokensPerBlock: \"1000\"\n    };\n  }\n\n  render() {\n    return __jsx(Layout, {\n      page: \"wallet\"\n    }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h2\", null, this.props.tokenName, \" | \", this.props.tokenSymbol))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, \"Token Address: \", this.props.address))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 16\n    }, __jsx(\"h3\", null, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.props.exchangeRate, \"ether\"), \" Ether\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 7\n    }, __jsx(\"h3\", null, \"Sell Tokens:\"), __jsx(Form, {\n      onSubmit: this.sellTokens,\n      error: !!this.state.sellTokensErrorMessage\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      label: this.props.tokenSymbol,\n      labelPosition: \"right\",\n      value: this.state.tokensToSell,\n      onChange: event => this.setState({\n        tokensToSell: event.target.value\n      })\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.sellTokensErrorMessage\n    }), __jsx(Button, {\n      loading: this.state.sellTokensLoading,\n      color: \"teal\"\n    }, \"Sell Tokens\")))), __jsx(Grid.Column, {\n      width: 10\n    }, __jsx(\"h3\", null, \"Transfer Tokens:\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\\xA0\", this.props.userBalance, \"\\xA0\", this.props.tokenSymbol)), __jsx(Form, {\n      onSubmit: this.transferTokens,\n      error: !!this.state.transferTokensErrorMessage\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Trasfer to:\"), __jsx(Input, {\n      placeholder: \"Wallet Address: 0x...\",\n      value: this.state.tokensToTransfer,\n      onChange: event => this.setState({\n        tokensToTransfer: event.target.value\n      })\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.transferTokensErrorMessage\n    }), __jsx(Button, {\n      color: \"teal\",\n      loading: this.state.transferTokensLoading\n    }, \"Transfer\")))));\n  }\n\n}\n\nexport default TokenShow;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/wallet.js"],"names":["React","Component","Form","Button","Input","Message","Grid","Layout","web3","Token","Router","TokenShow","reserveBlockErrorMessage","sellTokensErrorMessage","reserveBlockLoading","sellTokensLoading","tokensToSell","tokensToTransfer","transferToAddress","event","preventDefault","setState","transferTokensLoading","transferTokensErrorMessage","getInitialProps","props","address","query","tokenName","tokenSymbol","userBalance","exchangeRate","blockCost","tokensPerBlock","render","utils","fromWei","sellTokens","state","target","value","transferTokens"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport Token from \"../../ethereum/token\";\nimport { Router } from \"../../routes\";\n\nclass TokenShow extends Component {\n  state = {\n    reserveBlockErrorMessage: \"\",\n    sellTokensErrorMessage: \"\",\n    reserveBlockLoading: false,\n    sellTokensLoading: false,\n    tokensToSell: \"\",\n    tokensToTransfer: \"\",\n    transferToAddress: \"\"\n  };\n\n  static async getInitialProps(props) {\n    //const project = Project(props.query.address);\n\n    //const summary = await project.methods.getSummary().call();\n\n    return {\n      address: props.query.address,\n      tokenName: \"Token Name\",\n      tokenSymbol: \"TKNS\",\n      userBalance: \"2004.110\",\n      exchangeRate: \"10000503000000000\",\n      blockCost: \"1000000000023400000\",\n      tokensPerBlock: \"1000\"\n    };\n  }\n\n  reserveTokenBlock = async event => {\n    event.preventDefault();\n\n    this.setState({ reserveBlockLoading: true, reserveBlockErrorMessage: \"\" });\n\n    // try {\n    //   const accounts = await web3.eth.getAccounts();\n    //   await tokenFactory.methods\n    //     .createToken(\n    //       this.state.tokenName,\n    //       this.state.tokenSymbol,\n    //       this.state.wholeTokens,\n    //       this.state.decimals\n    //     )\n    //     .send({\n    //       from: accounts[0]\n    //     });\n    //\n    //   Router.pushRoute(\"/funding\");\n    // } catch (err) {\n    //   this.setState({ reserveTokenErrorMessage: err.message });\n    // }\n\n    this.setState({ reserveBlockLoading: false });\n  };\n\n  sellTokens = async event => {\n    event.preventDefault();\n\n    this.setState({ sellTokensLoading: true, sellTokensErrorMessage: \"\" });\n    this.setState({ sellTokensLoading: false });\n  };\n\n  transferTokens = async event => {\n    event.preventDefault();\n\n    this.setState({\n      transferTokensLoading: true,\n      transferTokensErrorMessage: \"\"\n    });\n    this.setState({ transferTokensLoading: false });\n  };\n\n  render() {\n    return (\n      <Layout page=\"wallet\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <h2>\n                {this.props.tokenName} | {this.props.tokenSymbol}\n              </h2>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <h3>Token Address: {this.props.address}</h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={16}>\n              <h3>\n                1 {this.props.tokenSymbol} ={\" \"}\n                {web3.utils.fromWei(this.props.exchangeRate, \"ether\")} Ether\n              </h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={7}>\n              <h3>Sell Tokens:</h3>\n              <Form\n                onSubmit={this.sellTokens}\n                error={!!this.state.sellTokensErrorMessage}\n              >\n                <Form.Field>\n                  <Input\n                    label={this.props.tokenSymbol}\n                    labelPosition=\"right\"\n                    value={this.state.tokensToSell}\n                    onChange={event =>\n                      this.setState({ tokensToSell: event.target.value })\n                    }\n                  />\n                </Form.Field>\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.sellTokensErrorMessage}\n                />\n                <Button loading={this.state.sellTokensLoading} color=\"teal\">\n                  Sell Tokens\n                </Button>\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Column width={10}>\n            <h3>Transfer Tokens:</h3>\n            <p>\n              <strong>\n                Balance:&nbsp;{this.props.userBalance}&nbsp;\n                {this.props.tokenSymbol}\n              </strong>\n            </p>\n            <Form\n              onSubmit={this.transferTokens}\n              error={!!this.state.transferTokensErrorMessage}\n            >\n              <Form.Field>\n                <label>Trasfer to:</label>\n                <Input\n                  placeholder=\"Wallet Address: 0x...\"\n                  value={this.state.tokensToTransfer}\n                  onChange={event =>\n                    this.setState({ tokensToTransfer: event.target.value })\n                  }\n                />\n              </Form.Field>\n              <Message\n                error\n                header=\"Oops!\"\n                content={this.state.transferTokensErrorMessage}\n              />\n              <Button color=\"teal\" loading={this.state.transferTokensLoading}>\n                Transfer\n              </Button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default TokenShow;\n"]},"metadata":{},"sourceType":"module"}