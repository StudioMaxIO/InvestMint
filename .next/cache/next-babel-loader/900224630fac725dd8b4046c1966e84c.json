{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Grid, Form, Button, Input, Message, Select, Icon, Table } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport investMintFactory from \"../../ethereum/investMintFactory\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nclass InvestMintNew extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      tokenName: \"\",\n      tokenSymbol: \"\",\n      errorMessage: \"\",\n      tokensPerBlock: \"1000\",\n      minimumReturn: \"10\",\n      blocksToStabilize: \"50\",\n      blockPricingInput1: \"#\",\n      blockPricingInput2: \"100\",\n      blockPricingOperand: \"/\",\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: \"\"\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        /*await tokenMintFactory.methods\n          .createToken(\n            this.state.tokenName,\n            this.state.tokenSymbol,\n            this.state.wholeTokens,\n            this.state.decimals\n          )\n          .send({\n            from: accounts[0]\n          });*/\n        //Router.pushRoute(\"/funding\");\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      page: \"create\"\n    }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h2\", null, \"Create a Mintable ERC-20 Token\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, \"Token Details\"))), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: !!this.state.errorMessage\n    }, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n      widths: \"equal\"\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Token Name\"), __jsx(Input, {\n      value: this.state.tokenName,\n      onChange: event => this.setState({\n        tokenName: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Token Symbol\"), __jsx(Input, {\n      value: this.state.tokenSymbol,\n      onChange: event => this.setState({\n        tokenSymbol: event.target.value\n      })\n    }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n      widths: \"equal\"\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Decimals\"), __jsx(Input, {\n      value: this.state.decimals,\n      onChange: event => this.setState({\n        decimals: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Tokens Per Block\"), __jsx(Input, {\n      value: this.state.tokensPerBlock,\n      onChange: event => this.setState({\n        tokensPerBlock: event.target.value\n      })\n    }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n      inline: true\n    }, __jsx(Form.Field, {\n      label: \"Mint Fee Pricing:\",\n      control: \"select\",\n      value: this.state.blockPricingInput1,\n      onChange: event => this.setState({\n        blockPricingInput1: event.target.value,\n        blockPricingInput2: event.target.value != \"#\" ? \"#\" : this.state.blockPricingInput2\n      })\n    }, __jsx(\"option\", {\n      value: \"#\"\n    }, \"Number of Blocks\"), __jsx(\"option\", {\n      value: \"0.5\"\n    }, \"0.5\"), __jsx(\"option\", {\n      value: \"1\"\n    }, \"1\"), __jsx(\"option\", {\n      value: \"2\"\n    }, \"2\"), __jsx(\"option\", {\n      value: \"3\"\n    }, \"3\"), __jsx(\"option\", {\n      value: \"4\"\n    }, \"4\"), __jsx(\"option\", {\n      value: \"5\"\n    }, \"5\"), __jsx(\"option\", {\n      value: \"6\"\n    }, \"6\"), __jsx(\"option\", {\n      value: \"7\"\n    }, \"7\"), __jsx(\"option\", {\n      value: \"8\"\n    }, \"8\"), __jsx(\"option\", {\n      value: \"9\"\n    }, \"9\"), __jsx(\"option\", {\n      value: \"10\"\n    }, \"10\")), __jsx(Form.Field, {\n      control: \"select\",\n      value: this.state.blockPricingOperand,\n      onChange: event => this.setState({\n        blockPricingOperand: event.target.value\n      })\n    }, __jsx(\"option\", {\n      value: \"/\"\n    }, \"/\"), __jsx(\"option\", {\n      value: \"*\"\n    }, \"*\"), __jsx(\"option\", {\n      value: \"^\"\n    }, \"^\"), __jsx(\"option\", {\n      value: \"+\"\n    }, \"+\"), __jsx(\"option\", {\n      value: \"-\"\n    }, \"-\")), __jsx(Form.Field, {\n      control: \"select\",\n      value: this.state.blockPricingInput2,\n      onChange: event => this.setState({\n        blockPricingInput2: event.target.value,\n        blockPricingInput1: event.target.value != \"#\" ? \"#\" : this.state.blockPricingInput1\n      })\n    }, __jsx(\"option\", {\n      value: \"#\"\n    }, \"Number of Blocks\"), __jsx(\"option\", {\n      value: \"0.5\"\n    }, \"0.5\"), __jsx(\"option\", {\n      value: \"1\"\n    }, \"1\"), __jsx(\"option\", {\n      value: \"2\"\n    }, \"2\"), __jsx(\"option\", {\n      value: \"3\"\n    }, \"3\"), __jsx(\"option\", {\n      value: \"4\"\n    }, \"4\"), __jsx(\"option\", {\n      value: \"5\"\n    }, \"5\"), __jsx(\"option\", {\n      value: \"6\"\n    }, \"6\"), __jsx(\"option\", {\n      value: \"7\"\n    }, \"7\"), __jsx(\"option\", {\n      value: \"8\"\n    }, \"8\"), __jsx(\"option\", {\n      value: \"9\"\n    }, \"9\"), __jsx(\"option\", {\n      value: \"10\"\n    }, \"10\"), __jsx(\"option\", {\n      value: \"20\"\n    }, \"20\"), __jsx(\"option\", {\n      value: \"30\"\n    }, \"30\"), __jsx(\"option\", {\n      value: \"40\"\n    }, \"40\"), __jsx(\"option\", {\n      value: \"50\"\n    }, \"50\"), __jsx(\"option\", {\n      value: \"60\"\n    }, \"60\"), __jsx(\"option\", {\n      value: \"70\"\n    }, \"70\"), __jsx(\"option\", {\n      value: \"80\"\n    }, \"80\"), __jsx(\"option\", {\n      value: \"90\"\n    }, \"90\"), __jsx(\"option\", {\n      value: \"100\"\n    }, \"100\"), __jsx(\"option\", {\n      value: \"200\"\n    }, \"200\"), __jsx(\"option\", {\n      value: \"300\"\n    }, \"300\"), __jsx(\"option\", {\n      value: \"400\"\n    }, \"400\"), __jsx(\"option\", {\n      value: \"500\"\n    }, \"500\"), __jsx(\"option\", {\n      value: \"600\"\n    }, \"600\"), __jsx(\"option\", {\n      value: \"700\"\n    }, \"700\"), __jsx(\"option\", {\n      value: \"800\"\n    }, \"800\"), __jsx(\"option\", {\n      value: \"900\"\n    }, \"900\"), __jsx(\"option\", {\n      value: \"1000\"\n    }, \"1000\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    }), __jsx(\"br\", null))))));\n  }\n\n}\n\nexport default InvestMintNew;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/new.js"],"names":["React","Component","Grid","Form","Button","Input","Message","Select","Icon","Table","Layout","investMintFactory","web3","Router","InvestMintNew","tokenName","tokenSymbol","errorMessage","tokensPerBlock","minimumReturn","blocksToStabilize","blockPricingInput1","blockPricingInput2","blockPricingOperand","loading","event","preventDefault","setState","accounts","eth","getAccounts","err","message","render","onSubmit","state","target","value","decimals"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Grid,\n  Form,\n  Button,\n  Input,\n  Message,\n  Select,\n  Icon,\n  Table\n} from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport investMintFactory from \"../../ethereum/investMintFactory\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nclass InvestMintNew extends Component {\n  state = {\n    tokenName: \"\",\n    tokenSymbol: \"\",\n    errorMessage: \"\",\n    tokensPerBlock: \"1000\",\n    minimumReturn: \"10\",\n    blocksToStabilize: \"50\",\n    blockPricingInput1: \"#\",\n    blockPricingInput2: \"100\",\n    blockPricingOperand: \"/\",\n    loading: false\n  };\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({ loading: true, errorMessage: \"\" });\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      /*await tokenMintFactory.methods\n        .createToken(\n          this.state.tokenName,\n          this.state.tokenSymbol,\n          this.state.wholeTokens,\n          this.state.decimals\n        )\n        .send({\n          from: accounts[0]\n        });*/\n\n      //Router.pushRoute(\"/funding\");\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    }\n\n    this.setState({ loading: false });\n  };\n\n  render() {\n    return (\n      <Layout page=\"create\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <h2>Create a Mintable ERC-20 Token</h2>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <h3>Token Details</h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Token Name</label>\n                    <Input\n                      value={this.state.tokenName}\n                      onChange={event =>\n                        this.setState({ tokenName: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Token Symbol</label>\n                    <Input\n                      value={this.state.tokenSymbol}\n                      onChange={event =>\n                        this.setState({ tokenSymbol: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Decimals</label>\n                    <Input\n                      value={this.state.decimals}\n                      onChange={event =>\n                        this.setState({ decimals: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Tokens Per Block</label>\n                    <Input\n                      value={this.state.tokensPerBlock}\n                      onChange={event =>\n                        this.setState({ tokensPerBlock: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group inline>\n                  <Form.Field\n                    label=\"Mint Fee Pricing:\"\n                    control=\"select\"\n                    value={this.state.blockPricingInput1}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingInput1: event.target.value,\n                        blockPricingInput2:\n                          event.target.value != \"#\"\n                            ? \"#\"\n                            : this.state.blockPricingInput2\n                      })\n                    }\n                  >\n                    <option value=\"#\">Number of Blocks</option>\n                    <option value=\"0.5\">0.5</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                  </Form.Field>\n                  <Form.Field\n                    control=\"select\"\n                    value={this.state.blockPricingOperand}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingOperand: event.target.value\n                      })\n                    }\n                  >\n                    <option value=\"/\">/</option>\n                    <option value=\"*\">*</option>\n                    <option value=\"^\">^</option>\n                    <option value=\"+\">+</option>\n                    <option value=\"-\">-</option>\n                  </Form.Field>\n                  <Form.Field\n                    control=\"select\"\n                    value={this.state.blockPricingInput2}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingInput2: event.target.value,\n                        blockPricingInput1:\n                          event.target.value != \"#\"\n                            ? \"#\"\n                            : this.state.blockPricingInput1\n                      })\n                    }\n                  >\n                    <option value=\"#\">Number of Blocks</option>\n                    <option value=\"0.5\">0.5</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"30\">30</option>\n                    <option value=\"40\">40</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"60\">60</option>\n                    <option value=\"70\">70</option>\n                    <option value=\"80\">80</option>\n                    <option value=\"90\">90</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                    <option value=\"300\">300</option>\n                    <option value=\"400\">400</option>\n                    <option value=\"500\">500</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                    <option value=\"800\">800</option>\n                    <option value=\"900\">900</option>\n                    <option value=\"1000\">1000</option>\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.errorMessage}\n                />\n                <br />\n              </Grid.Column>\n            </Grid.Row>\n          </Form>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default InvestMintNew;\n"]},"metadata":{},"sourceType":"module"}