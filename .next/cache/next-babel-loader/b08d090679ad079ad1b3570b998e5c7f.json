{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nvar TokenWallet = /*#__PURE__*/function (_Component) {\n  _inherits(TokenWallet, _Component);\n\n  var _super = _createSuper(TokenWallet);\n\n  function TokenWallet() {\n    var _this;\n\n    _classCallCheck(this, TokenWallet);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      exchangeTokensErrorMessage: \"\",\n      exchangeTokensLoading: false,\n      tokensToExchange: \"\",\n      userBalance: \"\",\n      exchangeButtonText: \"Enter Amount to Exchange\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setExchangeValue\", function (event) {\n      var buttonText = \"Enter Amount To Exchange\";\n\n      if (event.target.value != \"\") {\n        var ubEth = web3.utils.fromWei(_this.state.userBalance, \"ether\");\n        var exchangeInput = event.target.value;\n\n        if (event.target.value > ubEth) {\n          exchangeInput = ubEth;\n        }\n\n        var totalExchange = web3.utils.fromWei(_this.props.exchangeRate) * exchangeInput;\n        buttonText = \"Exchange for \" + totalExchange + \" ETH\";\n      }\n\n      _this.setState({\n        tokensToExchange: event.target.value,\n        exchangeButtonText: buttonText\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"exchangeTokens\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  exchangeTokensLoading: true,\n                  exchangeTokensErrorMessage: \"\"\n                });\n\n                _context.prev = 2;\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                _context.next = 8;\n                return tokenFactory.methods.createToken(_this.state.tokenName, _this.state.tokenSymbol, _this.state.wholeTokens, _this.state.decimals).send({\n                  from: accounts[0]\n                });\n\n              case 8:\n                Router.pushRoute(\"/funding\");\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  reserveTokenErrorMessage: _context.t0.message\n                });\n\n              case 14:\n                _this.setState({\n                  reserveBlockLoading: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(TokenWallet, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._isMounted = true;\n                this._isMounted && this.loadUserData();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"loadUserData\",\n    value: function () {\n      var _loadUserData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var accounts, imToken, ub;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context3.sent;\n\n                if (!accounts[0]) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                imToken = InvestMint(this.props.address);\n                _context3.next = 7;\n                return imToken.methods.balanceOf(accounts[0]).call();\n\n              case 7:\n                ub = _context3.sent;\n                this.setState({\n                  userBalance: ub\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadUserData() {\n        return _loadUserData.apply(this, arguments);\n      }\n\n      return loadUserData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        page: \"wallet\"\n      }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"center\", null, __jsx(Card, {\n        style: {\n          padding: \"10px\",\n          textAlign: \"left\",\n          fontSize: \"18px\"\n        }\n      }, __jsx(\"h2\", {\n        style: {\n          textAlign: \"center\"\n        }\n      }, this.props.tokenName, \" | \", this.props.tokenSymbol), __jsx(\"p\", {\n        style: {\n          textAlign: \"center\",\n          fontSize: \"18px\"\n        }\n      }, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.props.exchangeRate, \"ether\"), \" Ether\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\"), __jsx(\"br\", null), web3.utils.fromWei(this.state.userBalance, \"ether\")), __jsx(\"p\", null, __jsx(\"strong\", null, \"Exchange Tokens:\")), __jsx(Form, {\n        onSubmit: this.exchangeTokens,\n        error: !!this.state.exchangeTokensErrorMessage\n      }, __jsx(Form.Field, null, __jsx(Input, {\n        label: this.props.tokenSymbol,\n        labelPosition: \"right\",\n        value: this.state.tokensToExchange,\n        onChange: function onChange(event) {\n          return _this2.setExchangeValue(event);\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.exchangeTokensErrorMessage\n      }), __jsx(\"center\", null, __jsx(Button, {\n        size: \"large\",\n        loading: this.state.exchangeTokensLoading,\n        color: \"teal\"\n      }, this.state.exchangeButtonText)))))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(props) {\n        var imToken, summary;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this._isMounted = false;\n                imToken = InvestMint(props.query.address);\n                _context4.next = 4;\n                return imToken.methods.getSummary().call();\n\n              case 4:\n                summary = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  address: props.query.address,\n                  tokenName: summary[0],\n                  tokenSymbol: summary[1],\n                  tokensPerBlock: summary[2],\n                  exchangeRate: summary[4],\n                  blockCost: summary[3]\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getInitialProps(_x2) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return TokenWallet;\n}(Component);\n\nexport default TokenWallet;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/wallet.js"],"names":["React","Component","Form","Button","Input","Message","Grid","Card","Layout","web3","InvestMint","Router","TokenWallet","exchangeTokensErrorMessage","exchangeTokensLoading","tokensToExchange","userBalance","exchangeButtonText","event","buttonText","target","value","ubEth","utils","fromWei","state","exchangeInput","totalExchange","props","exchangeRate","setState","preventDefault","eth","getAccounts","accounts","tokenFactory","methods","createToken","tokenName","tokenSymbol","wholeTokens","decimals","send","from","pushRoute","reserveTokenErrorMessage","message","reserveBlockLoading","_isMounted","loadUserData","imToken","address","balanceOf","call","ub","padding","textAlign","fontSize","exchangeTokens","setExchangeValue","query","getSummary","summary","tokensPerBlock","blockCost"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nclass TokenWallet extends Component {\n  state = {\n    exchangeTokensErrorMessage: \"\",\n    exchangeTokensLoading: false,\n    tokensToExchange: \"\",\n    userBalance: \"\",\n    exchangeButtonText: \"Enter Amount to Exchange\"\n  };\n\n  static async getInitialProps(props) {\n    this._isMounted = false;\n    const imToken = InvestMint(props.query.address);\n    const summary = await imToken.methods.getSummary().call();\n\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      tokensPerBlock: summary[2],\n      exchangeRate: summary[4],\n      blockCost: summary[3]\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.loadUserData();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setExchangeValue = event => {\n    var buttonText = \"Enter Amount To Exchange\";\n\n    if (event.target.value != \"\") {\n      const ubEth = web3.utils.fromWei(this.state.userBalance, \"ether\");\n      var exchangeInput = event.target.value;\n      if (event.target.value > ubEth) {\n        exchangeInput = ubEth;\n      }\n      const totalExchange =\n        web3.utils.fromWei(this.props.exchangeRate) * exchangeInput;\n      buttonText = \"Exchange for \" + totalExchange + \" ETH\";\n    }\n\n    this.setState({\n      tokensToExchange: event.target.value,\n      exchangeButtonText: buttonText\n    });\n  };\n\n  exchangeTokens = async event => {\n    event.preventDefault();\n    this.setState({\n      exchangeTokensLoading: true,\n      exchangeTokensErrorMessage: \"\"\n    });\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      await tokenFactory.methods\n        .createToken(\n          this.state.tokenName,\n          this.state.tokenSymbol,\n          this.state.wholeTokens,\n          this.state.decimals\n        )\n        .send({\n          from: accounts[0]\n        });\n\n      Router.pushRoute(\"/funding\");\n    } catch (err) {\n      this.setState({ reserveTokenErrorMessage: err.message });\n    }\n\n    this.setState({ reserveBlockLoading: false });\n  };\n\n  async loadUserData() {\n    const accounts = await web3.eth.getAccounts();\n    if (accounts[0]) {\n      const imToken = InvestMint(this.props.address);\n      const ub = await imToken.methods.balanceOf(accounts[0]).call();\n      this.setState({ userBalance: ub });\n    }\n  }\n\n  render() {\n    return (\n      <Layout page=\"wallet\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <center>\n                <Card\n                  style={{\n                    padding: \"10px\",\n                    textAlign: \"left\",\n                    fontSize: \"18px\"\n                  }}\n                >\n                  <h2\n                    style={{\n                      textAlign: \"center\"\n                    }}\n                  >\n                    {this.props.tokenName} | {this.props.tokenSymbol}\n                  </h2>\n                  <p\n                    style={{\n                      textAlign: \"center\",\n                      fontSize: \"18px\"\n                    }}\n                  >\n                    1 {this.props.tokenSymbol} ={\" \"}\n                    {web3.utils.fromWei(this.props.exchangeRate, \"ether\")} Ether\n                  </p>\n                  <p>\n                    <strong>Balance:</strong>\n                    <br />\n                    {web3.utils.fromWei(this.state.userBalance, \"ether\")}\n                  </p>\n                  <p>\n                    <strong>Exchange Tokens:</strong>\n                  </p>\n                  <Form\n                    onSubmit={this.exchangeTokens}\n                    error={!!this.state.exchangeTokensErrorMessage}\n                  >\n                    <Form.Field>\n                      <Input\n                        label={this.props.tokenSymbol}\n                        labelPosition=\"right\"\n                        value={this.state.tokensToExchange}\n                        onChange={event => this.setExchangeValue(event)}\n                      />\n                    </Form.Field>\n                    <Message\n                      error\n                      header=\"Oops!\"\n                      content={this.state.exchangeTokensErrorMessage}\n                    />\n                    <center>\n                      <Button\n                        size=\"large\"\n                        loading={this.state.exchangeTokensLoading}\n                        color=\"teal\"\n                      >\n                        {this.state.exchangeButtonText}\n                      </Button>\n                    </center>\n                  </Form>\n                </Card>\n              </center>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default TokenWallet;\n"]},"metadata":{},"sourceType":"module"}