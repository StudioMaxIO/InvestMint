{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport Token from \"../../ethereum/token\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nclass TokenShow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      reserveBlockErrorMessage: \"\",\n      sellTokensErrorMessage: \"\",\n      reserveBlockLoading: false,\n      sellTokensLoading: false,\n      tokensToSell: \"\",\n      tokensToTransfer: \"\",\n      transferToAddress: \"\",\n      isAuthorized: false\n    });\n\n    _defineProperty(this, \"authorizeReservation\", async event => {\n      event.preventDefault();\n    });\n\n    _defineProperty(this, \"reserveTokenBlock\", async event => {\n      event.preventDefault();\n      this.setState({\n        reserveBlockLoading: true,\n        reserveBlockErrorMessage: \"\"\n      }); // try {\n      //   const accounts = await web3.eth.getAccounts();\n      //   await tokenFactory.methods\n      //     .createToken(\n      //       this.state.tokenName,\n      //       this.state.tokenSymbol,\n      //       this.state.wholeTokens,\n      //       this.state.decimals\n      //     )\n      //     .send({\n      //       from: accounts[0]\n      //     });\n      //\n      //   Router.pushRoute(\"/funding\");\n      // } catch (err) {\n      //   this.setState({ reserveTokenErrorMessage: err.message });\n      // }\n\n      this.setState({\n        reserveBlockLoading: false\n      });\n    });\n\n    _defineProperty(this, \"sellTokens\", async event => {\n      event.preventDefault();\n      this.setState({\n        sellTokensLoading: true,\n        sellTokensErrorMessage: \"\"\n      });\n      this.setState({\n        sellTokensLoading: false\n      });\n    });\n\n    _defineProperty(this, \"transferTokens\", async event => {\n      event.preventDefault();\n      this.setState({\n        transferTokensLoading: true,\n        transferTokensErrorMessage: \"\"\n      });\n      this.setState({\n        transferTokensLoading: false\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    //const project = Project(props.query.address);\n    this._isMounted = false;\n    const investMintToken = InvestMint(props.query.address);\n    const summary = await investMintToken.methods.getSummary().call();\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      userBalance: \"2004.110\",\n      exchangeRate: \"10000503000000000\",\n      blockCost: \"1000000000023400000\",\n      tokensPerBlock: \"1000\"\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.checkAuthorization();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  async checkAuthorization() {\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts[0]) {\n      const linkToken = Token(\"0xa36085f69e2889c224210f603d836748e7dc0088\");\n      const authorization = await linkToken.methods.allowance(accounts[0], this.props.address).call();\n\n      if (authorization >= 1 * (10 ^ 18)) {\n        this._isMounted && this.setState({\n          isAuthorized: true\n        });\n      }\n    }\n  }\n\n  render() {\n    //this.checkAuthorization();\n    return __jsx(Layout, {\n      page: \"funding\"\n    }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h1\", null, this.props.tokenName, \" | \", this.props.tokenSymbol))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"center\", null, __jsx(\"h2\", null, \"Mint Tokens:\"), __jsx(\"h3\", null, __jsx(\"strong\", null, \"Block Cost:\"), \" \", web3.utils.fromWei(this.props.blockCost, \"ether\"), \" Ether\"), __jsx(\"h3\", null, __jsx(\"strong\", null, \"Tokens per Block:\"), \" \", this.props.tokensPerBlock, \" \", this.props.tokenSymbol), __jsx(Form, {\n      onSubmit: this.state.isAuthorized ? this.reserveTokenBlock : this.authorizeReservation,\n      error: !!this.state.reserveBlockErrorMessage\n    }, __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.reserveBlockErrorMessage\n    }), __jsx(Button, {\n      loading: this.state.reserveBlockLoading,\n      color: \"teal\"\n    }, this.state.isAuthorized ? \"Reserve Block\" : \"Authorize LINK\")))))));\n  }\n\n}\n\nexport default TokenShow;","map":null,"metadata":{},"sourceType":"module"}