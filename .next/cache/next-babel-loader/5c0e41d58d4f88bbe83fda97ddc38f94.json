{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Grid, Form, Button, Input, Message, Select, Icon, Table } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport investMintFactory from \"../../ethereum/investMintFactory\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nvar InvestMintNew = /*#__PURE__*/function (_Component) {\n  _inherits(InvestMintNew, _Component);\n\n  var _super = _createSuper(InvestMintNew);\n\n  function InvestMintNew() {\n    var _this;\n\n    _classCallCheck(this, InvestMintNew);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      tokenName: \"\",\n      tokenSymbol: \"\",\n      errorMessage: \"\",\n      tokensPerBlock: \"1000\",\n      minimumReturn: \"10\",\n      blocksToStabilize: \"75\",\n      blockPricingInput1: \"2\",\n      blockPricingInput2: \"#\",\n      blockPricingOperand: \"*\",\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: \"\"\n                });\n\n                _context.prev = 2;\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 11:\n                _this.setState({\n                  loading: false\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(InvestMintNew, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        page: \"create\"\n      }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h2\", null, \"Create a Mintable ERC-20 Token\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, \"Token Details\"))), __jsx(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage\n      }, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        widths: \"equal\"\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Token Name\"), __jsx(Input, {\n        value: this.state.tokenName,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokenName: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Token Symbol\"), __jsx(Input, {\n        value: this.state.tokenSymbol,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokenSymbol: event.target.value\n          });\n        }\n      }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        widths: \"equal\"\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Decimals\"), __jsx(Input, {\n        value: this.state.decimals,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            decimals: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Tokens Per Block\"), __jsx(Input, {\n        value: this.state.tokensPerBlock,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokensPerBlock: event.target.value\n          });\n        }\n      }))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Form.Group, {\n        inline: true\n      }, __jsx(Form.Field, {\n        label: \"Mint Fee Pricing:\",\n        control: \"select\",\n        value: this.state.blockPricingInput1,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            blockPricingInput1: event.target.value,\n            blockPricingInput2: event.target.value != \"#\" ? \"#\" : _this2.state.blockPricingInput2\n          });\n        }\n      }, __jsx(\"option\", {\n        value: \"#\"\n      }, \"Number of Blocks\"), __jsx(\"option\", {\n        value: \"0.5\"\n      }, \"0.5\"), __jsx(\"option\", {\n        value: \"1\"\n      }, \"1\"), __jsx(\"option\", {\n        value: \"2\"\n      }, \"2\"), __jsx(\"option\", {\n        value: \"3\"\n      }, \"3\"), __jsx(\"option\", {\n        value: \"4\"\n      }, \"4\"), __jsx(\"option\", {\n        value: \"5\"\n      }, \"5\"), __jsx(\"option\", {\n        value: \"6\"\n      }, \"6\"), __jsx(\"option\", {\n        value: \"7\"\n      }, \"7\"), __jsx(\"option\", {\n        value: \"8\"\n      }, \"8\"), __jsx(\"option\", {\n        value: \"9\"\n      }, \"9\"), __jsx(\"option\", {\n        value: \"10\"\n      }, \"10\")), __jsx(Form.Field, {\n        control: \"select\",\n        value: this.state.blockPricingOperand,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            blockPricingOperand: event.target.value\n          });\n        }\n      }, __jsx(\"option\", {\n        value: \"*\"\n      }, \"*\"), __jsx(\"option\", {\n        value: \"^\"\n      }, \"^\"), __jsx(\"option\", {\n        value: \"+\"\n      }, \"+\"), __jsx(\"option\", {\n        value: \"-\"\n      }, \"-\"), __jsx(\"option\", {\n        value: \"/\"\n      }, \"/\")), __jsx(Form.Field, {\n        control: \"select\",\n        value: this.state.blockPricingInput2,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            blockPricingInput2: event.target.value,\n            blockPricingInput1: event.target.value != \"#\" ? \"#\" : _this2.state.blockPricingInput1\n          });\n        }\n      }, __jsx(\"option\", {\n        value: \"#\"\n      }, \"Number of Blocks\"), __jsx(\"option\", {\n        value: \"0.5\"\n      }, \"0.5\"), __jsx(\"option\", {\n        value: \"1\"\n      }, \"1\"), __jsx(\"option\", {\n        value: \"2\"\n      }, \"2\"), __jsx(\"option\", {\n        value: \"3\"\n      }, \"3\"), __jsx(\"option\", {\n        value: \"4\"\n      }, \"4\"), __jsx(\"option\", {\n        value: \"5\"\n      }, \"5\"), __jsx(\"option\", {\n        value: \"6\"\n      }, \"6\"), __jsx(\"option\", {\n        value: \"7\"\n      }, \"7\"), __jsx(\"option\", {\n        value: \"8\"\n      }, \"8\"), __jsx(\"option\", {\n        value: \"9\"\n      }, \"9\"), __jsx(\"option\", {\n        value: \"10\"\n      }, \"10\"), __jsx(\"option\", {\n        value: \"20\"\n      }, \"20\"), __jsx(\"option\", {\n        value: \"30\"\n      }, \"30\"), __jsx(\"option\", {\n        value: \"40\"\n      }, \"40\"), __jsx(\"option\", {\n        value: \"50\"\n      }, \"50\"), __jsx(\"option\", {\n        value: \"60\"\n      }, \"60\"), __jsx(\"option\", {\n        value: \"70\"\n      }, \"70\"), __jsx(\"option\", {\n        value: \"80\"\n      }, \"80\"), __jsx(\"option\", {\n        value: \"90\"\n      }, \"90\"), __jsx(\"option\", {\n        value: \"100\"\n      }, \"100\"), __jsx(\"option\", {\n        value: \"200\"\n      }, \"200\"), __jsx(\"option\", {\n        value: \"300\"\n      }, \"300\"), __jsx(\"option\", {\n        value: \"400\"\n      }, \"400\"), __jsx(\"option\", {\n        value: \"500\"\n      }, \"500\"), __jsx(\"option\", {\n        value: \"600\"\n      }, \"600\"), __jsx(\"option\", {\n        value: \"700\"\n      }, \"700\"), __jsx(\"option\", {\n        value: \"800\"\n      }, \"800\"), __jsx(\"option\", {\n        value: \"900\"\n      }, \"900\"), __jsx(\"option\", {\n        value: \"1000\"\n      }, \"1000\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), __jsx(\"br\", null))))));\n    }\n  }]);\n\n  return InvestMintNew;\n}(Component);\n\nexport default InvestMintNew;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/new.js"],"names":["React","Component","Grid","Form","Button","Input","Message","Select","Icon","Table","Layout","investMintFactory","web3","Router","InvestMintNew","tokenName","tokenSymbol","errorMessage","tokensPerBlock","minimumReturn","blocksToStabilize","blockPricingInput1","blockPricingInput2","blockPricingOperand","loading","event","preventDefault","setState","eth","getAccounts","accounts","message","onSubmit","state","target","value","decimals"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Grid,\n  Form,\n  Button,\n  Input,\n  Message,\n  Select,\n  Icon,\n  Table\n} from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport investMintFactory from \"../../ethereum/investMintFactory\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\n\nclass InvestMintNew extends Component {\n  state = {\n    tokenName: \"\",\n    tokenSymbol: \"\",\n    errorMessage: \"\",\n    tokensPerBlock: \"1000\",\n    minimumReturn: \"10\",\n    blocksToStabilize: \"75\",\n    blockPricingInput1: \"2\",\n    blockPricingInput2: \"#\",\n    blockPricingOperand: \"*\",\n    loading: false\n  };\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({ loading: true, errorMessage: \"\" });\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      /*await tokenMintFactory.methods\n        .createToken(\n          this.state.tokenName,\n          this.state.tokenSymbol,\n          this.state.wholeTokens,\n          this.state.decimals\n        )\n        .send({\n          from: accounts[0]\n        });*/\n\n      //Router.pushRoute(\"/funding\");\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    }\n\n    this.setState({ loading: false });\n  };\n\n  render() {\n    return (\n      <Layout page=\"create\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <h2>Create a Mintable ERC-20 Token</h2>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <h3>Token Details</h3>\n            </Grid.Column>\n          </Grid.Row>\n          <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Token Name</label>\n                    <Input\n                      value={this.state.tokenName}\n                      onChange={event =>\n                        this.setState({ tokenName: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Token Symbol</label>\n                    <Input\n                      value={this.state.tokenSymbol}\n                      onChange={event =>\n                        this.setState({ tokenSymbol: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group widths=\"equal\">\n                  <Form.Field>\n                    <label>Decimals</label>\n                    <Input\n                      value={this.state.decimals}\n                      onChange={event =>\n                        this.setState({ decimals: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Tokens Per Block</label>\n                    <Input\n                      value={this.state.tokensPerBlock}\n                      onChange={event =>\n                        this.setState({ tokensPerBlock: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Group inline>\n                  <Form.Field\n                    label=\"Mint Fee Pricing:\"\n                    control=\"select\"\n                    value={this.state.blockPricingInput1}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingInput1: event.target.value,\n                        blockPricingInput2:\n                          event.target.value != \"#\"\n                            ? \"#\"\n                            : this.state.blockPricingInput2\n                      })\n                    }\n                  >\n                    <option value=\"#\">Number of Blocks</option>\n                    <option value=\"0.5\">0.5</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                  </Form.Field>\n                  <Form.Field\n                    control=\"select\"\n                    value={this.state.blockPricingOperand}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingOperand: event.target.value\n                      })\n                    }\n                  >\n                    <option value=\"*\">*</option>\n                    <option value=\"^\">^</option>\n                    <option value=\"+\">+</option>\n                    <option value=\"-\">-</option>\n                    <option value=\"/\">/</option>\n                  </Form.Field>\n                  <Form.Field\n                    control=\"select\"\n                    value={this.state.blockPricingInput2}\n                    onChange={event =>\n                      this.setState({\n                        blockPricingInput2: event.target.value,\n                        blockPricingInput1:\n                          event.target.value != \"#\"\n                            ? \"#\"\n                            : this.state.blockPricingInput1\n                      })\n                    }\n                  >\n                    <option value=\"#\">Number of Blocks</option>\n                    <option value=\"0.5\">0.5</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"30\">30</option>\n                    <option value=\"40\">40</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"60\">60</option>\n                    <option value=\"70\">70</option>\n                    <option value=\"80\">80</option>\n                    <option value=\"90\">90</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                    <option value=\"300\">300</option>\n                    <option value=\"400\">400</option>\n                    <option value=\"500\">500</option>\n                    <option value=\"600\">600</option>\n                    <option value=\"700\">700</option>\n                    <option value=\"800\">800</option>\n                    <option value=\"900\">900</option>\n                    <option value=\"1000\">1000</option>\n                  </Form.Field>\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.errorMessage}\n                />\n                <br />\n              </Grid.Column>\n            </Grid.Row>\n          </Form>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default InvestMintNew;\n"]},"metadata":{},"sourceType":"module"}