{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nvar TokenWallet = /*#__PURE__*/function (_Component) {\n  _inherits(TokenWallet, _Component);\n\n  var _super = _createSuper(TokenWallet);\n\n  function TokenWallet() {\n    var _this;\n\n    _classCallCheck(this, TokenWallet);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      exchangeTokensErrorMessage: \"\",\n      exchangeTokensLoading: false,\n      tokensToExchange: \"\",\n      userBalance: \"\",\n      exchangeRate: \"\",\n      blockCost: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sellTokens\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  exchangeTokensLoading: true,\n                  exchangeTokensErrorMessage: \"\"\n                });\n\n                _context.prev = 2;\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                _context.next = 8;\n                return tokenFactory.methods.createToken(_this.state.tokenName, _this.state.tokenSymbol, _this.state.wholeTokens, _this.state.decimals).send({\n                  from: accounts[0]\n                });\n\n              case 8:\n                Router.pushRoute(\"/funding\");\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  reserveTokenErrorMessage: _context.t0.message\n                });\n\n              case 14:\n                _this.setState({\n                  reserveBlockLoading: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"transferTokens\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  transferTokensLoading: true,\n                  transferTokensErrorMessage: \"\"\n                });\n\n                _this.setState({\n                  transferTokensLoading: false\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(TokenWallet, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._isMounted = true;\n                this._isMounted && this.loadUserData();\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"loadUserData\",\n    value: function () {\n      var _loadUserData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var accounts, imToken, ub;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n\n                if (!accounts[0]) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                imToken = InvestMint(props.query.address);\n                _context4.next = 7;\n                return imToken.methods.balanceOf(accounts[0]).call();\n\n              case 7:\n                ub = _context4.sent;\n                this.setState({\n                  userBalance: ub\n                });\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadUserData() {\n        return _loadUserData.apply(this, arguments);\n      }\n\n      return loadUserData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        page: \"wallet\"\n      }, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"center\", null, __jsx(Card, null, __jsx(\"h2\", null, this.props.tokenName, \" | \", this.props.tokenSymbol), __jsx(\"p\", null, \"1 \", this.props.tokenSymbol, \" =\", \" \", web3.utils.fromWei(this.state.exchangeRate, \"ether\"), \" Ether\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\"), __jsx(\"br\", null), web3.utils.fromWei(this.state.userBalance, \"ether\")))))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 7\n      }, __jsx(\"h3\", null, \"Sell Tokens:\"), __jsx(Form, {\n        onSubmit: this.sellTokens,\n        error: !!this.state.sellTokensErrorMessage\n      }, __jsx(Form.Field, null, __jsx(Input, {\n        label: this.props.tokenSymbol,\n        labelPosition: \"right\",\n        value: this.state.tokensToSell,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokensToSell: event.target.value\n          });\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.sellTokensErrorMessage\n      }), __jsx(Button, {\n        loading: this.state.sellTokensLoading,\n        color: \"teal\"\n      }, \"Sell Tokens\")))), __jsx(Grid.Column, {\n        width: 10\n      }, __jsx(\"h3\", null, \"Transfer Tokens:\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Balance:\\xA0\", this.props.userBalance, \"\\xA0\", this.props.tokenSymbol)), __jsx(Form, {\n        onSubmit: this.transferTokens,\n        error: !!this.state.transferTokensErrorMessage\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Trasfer to:\"), __jsx(Input, {\n        placeholder: \"Wallet Address: 0x...\",\n        value: this.state.tokensToTransfer,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            tokensToTransfer: event.target.value\n          });\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.transferTokensErrorMessage\n      }), __jsx(Button, {\n        color: \"teal\",\n        loading: this.state.transferTokensLoading\n      }, \"Transfer\")))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(props) {\n        var imToken, summary;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this._isMounted = false;\n                imToken = InvestMint(props.query.address);\n                _context5.next = 4;\n                return imToken.methods.getSummary().call();\n\n              case 4:\n                summary = _context5.sent;\n                this.setState({\n                  exchangeRate: summary[4],\n                  blockCost: summary[3]\n                });\n                return _context5.abrupt(\"return\", {\n                  address: props.query.address,\n                  tokenName: summary[0],\n                  tokenSymbol: summary[1],\n                  tokensPerBlock: summary[2]\n                });\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getInitialProps(_x3) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return TokenWallet;\n}(Component);\n\nexport default TokenWallet;","map":{"version":3,"sources":["/Users/max/Developer/StudioMax/InvestMint/pages/tokens/wallet.js"],"names":["React","Component","Form","Button","Input","Message","Grid","Card","Layout","web3","InvestMint","Router","TokenWallet","exchangeTokensErrorMessage","exchangeTokensLoading","tokensToExchange","userBalance","exchangeRate","blockCost","event","preventDefault","setState","eth","getAccounts","accounts","tokenFactory","methods","createToken","state","tokenName","tokenSymbol","wholeTokens","decimals","send","from","pushRoute","reserveTokenErrorMessage","message","reserveBlockLoading","transferTokensLoading","transferTokensErrorMessage","_isMounted","loadUserData","imToken","props","query","address","balanceOf","call","ub","utils","fromWei","sellTokens","sellTokensErrorMessage","tokensToSell","target","value","sellTokensLoading","transferTokens","tokensToTransfer","getSummary","summary","tokensPerBlock"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Message, Grid, Card } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport web3 from \"../../ethereum/web3\";\nimport InvestMint from \"../../ethereum/investMint\";\nimport { Router } from \"../../routes\";\n\nclass TokenWallet extends Component {\n  state = {\n    exchangeTokensErrorMessage: \"\",\n    exchangeTokensLoading: false,\n    tokensToExchange: \"\",\n    userBalance: \"\",\n    exchangeRate: \"\",\n    blockCost: \"\"\n  };\n\n  static async getInitialProps(props) {\n    this._isMounted = false;\n    const imToken = InvestMint(props.query.address);\n    const summary = await imToken.methods.getSummary().call();\n\n    this.setState({\n      exchangeRate: summary[4],\n      blockCost: summary[3]\n    });\n\n    return {\n      address: props.query.address,\n      tokenName: summary[0],\n      tokenSymbol: summary[1],\n      tokensPerBlock: summary[2]\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    this._isMounted && this.loadUserData();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  sellTokens = async event => {\n    event.preventDefault();\n    this.setState({\n      exchangeTokensLoading: true,\n      exchangeTokensErrorMessage: \"\"\n    });\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n      await tokenFactory.methods\n        .createToken(\n          this.state.tokenName,\n          this.state.tokenSymbol,\n          this.state.wholeTokens,\n          this.state.decimals\n        )\n        .send({\n          from: accounts[0]\n        });\n\n      Router.pushRoute(\"/funding\");\n    } catch (err) {\n      this.setState({ reserveTokenErrorMessage: err.message });\n    }\n\n    this.setState({ reserveBlockLoading: false });\n  };\n\n  async loadUserData() {\n    const accounts = await web3.eth.getAccounts();\n    if (accounts[0]) {\n      const imToken = InvestMint(props.query.address);\n      const ub = await imToken.methods.balanceOf(accounts[0]).call();\n      this.setState({ userBalance: ub });\n    }\n  }\n\n  transferTokens = async event => {\n    event.preventDefault();\n\n    this.setState({\n      transferTokensLoading: true,\n      transferTokensErrorMessage: \"\"\n    });\n    this.setState({ transferTokensLoading: false });\n  };\n\n  render() {\n    return (\n      <Layout page=\"wallet\">\n        <Grid>\n          <Grid.Row>\n            <Grid.Column>\n              <center>\n                <Card>\n                  <h2>\n                    {this.props.tokenName} | {this.props.tokenSymbol}\n                  </h2>\n                  <p>\n                    1 {this.props.tokenSymbol} ={\" \"}\n                    {web3.utils.fromWei(this.state.exchangeRate, \"ether\")} Ether\n                  </p>\n                  <p>\n                    <strong>Balance:</strong>\n                    <br />\n                    {web3.utils.fromWei(this.state.userBalance, \"ether\")}\n                  </p>\n                </Card>\n              </center>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={7}>\n              <h3>Sell Tokens:</h3>\n              <Form\n                onSubmit={this.sellTokens}\n                error={!!this.state.sellTokensErrorMessage}\n              >\n                <Form.Field>\n                  <Input\n                    label={this.props.tokenSymbol}\n                    labelPosition=\"right\"\n                    value={this.state.tokensToSell}\n                    onChange={event =>\n                      this.setState({ tokensToSell: event.target.value })\n                    }\n                  />\n                </Form.Field>\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.sellTokensErrorMessage}\n                />\n                <Button loading={this.state.sellTokensLoading} color=\"teal\">\n                  Sell Tokens\n                </Button>\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Column width={10}>\n            <h3>Transfer Tokens:</h3>\n            <p>\n              <strong>\n                Balance:&nbsp;{this.props.userBalance}&nbsp;\n                {this.props.tokenSymbol}\n              </strong>\n            </p>\n            <Form\n              onSubmit={this.transferTokens}\n              error={!!this.state.transferTokensErrorMessage}\n            >\n              <Form.Field>\n                <label>Trasfer to:</label>\n                <Input\n                  placeholder=\"Wallet Address: 0x...\"\n                  value={this.state.tokensToTransfer}\n                  onChange={event =>\n                    this.setState({ tokensToTransfer: event.target.value })\n                  }\n                />\n              </Form.Field>\n              <Message\n                error\n                header=\"Oops!\"\n                content={this.state.transferTokensErrorMessage}\n              />\n              <Button color=\"teal\" loading={this.state.transferTokensLoading}>\n                Transfer\n              </Button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default TokenWallet;\n"]},"metadata":{},"sourceType":"module"}